% Running on host: 149-161-183-161

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 522 facts.
% Have read 14 examples from 'train' [train/train*].
% Have read 92 examples from 'train' [train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 sentenceContainsTarget(a, b)
%  targetPred:                sentenceContainsTarget/2
%  targetArgTypes:            signature = [Const, Const], types = [+SID, +WID]
%  targets:                   [sentenceContainsTarget(a, b)]
%  targetPredicates:          [sentenceContainsTarget/2]
%  targetArgSpecs:            [[a[+SID], b[+WID]]]
%  variablesInTargets:        [[a, b]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 26 milliseconds
% Time to collect examples: 0 seconds

% Read 14 pos examples and 92 neg examples.
% Time to init learnOneClause: 39 milliseconds
% Old dirnull
Setting model dir

% Have 14 'raw' positive examples and kept 14.
% Have 92 'raw' negative examples and kept 92.

% processing backup's for sentenceContainsTarget
%  POS EX = 14
%  NEG EX = 92

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded
% Learning 5 trees in this iteration for sentenceContainsTarget

% Learn model for: sentenceContainsTarget
% Kept 14 of the 14 positive examples.
% Kept 30 of the 92 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21694214876033058
Set score:0.0025
% Dataset size: 44
Computing probabilities
prob time:2 milliseconds
No hidden examples for : sentenceContainsTarget
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21694214876033008
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 6 10 22 23 35 38 40 41 42
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    sentenceContainsTarget(+SID, +WID)
%  Modes (48):
%    nextSentenceInBlock(+BID, +SID, -SID),
%    nextSentenceInBlock(+BID, -SID, +SID),
%    earlySentenceInBlock(+BID, -SID),
%    midWaySentenceInBlock(+BID, -SID),
%    lateSentenceInBlock(+BID, -SID),
%    sentenceInBlock(-SID, +BID),
%    wordString(+WID, #WSTR),
%    partOfSpeechTag(+WID, #WPOS),
%    nextWordInSentence(+SID, +WID, -WID),
%    earlyWordInSentence(+SID, -WID),
%    midWayWordInSentence(+SID, -WID),
%    lateWordInSentence(+SID, -WID),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for wordString/2.
% [ LazyGroundClauseIndex ]  Building full index for wordString/2 with 106 assertions.
There is no fact nor clause nor built-in predicate matching: 'partOfSpeechTag/2'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: partOfSpeechTag/2.

% Skipping over this 'waitHere': There is no fact nor clause nor built-in predicate matching: 'partOfSpeechTag/2'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: partOfSpeechTag/2.
% [ LazyGroundClauseIndex ]  Building full index for nextWordInSentence/3 with 84 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for nextWordInSentence/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for nextWordInSentence/3.
% [ LazyGroundClauseIndex ]  Building full index for earlyWordInSentence/2 with 21 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for earlyWordInSentence/2.
% [ LazyGroundClauseIndex ]  Building full index for midWayWordInSentence/2 with 35 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for midWayWordInSentence/2.
There is no fact nor clause nor built-in predicate matching: 'lateWordInSentence/2'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: lateWordInSentence/2.

% Skipping over this 'waitHere': There is no fact nor clause nor built-in predicate matching: 'lateWordInSentence/2'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: lateWordInSentence/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.000001 (regressionFit = -2.77556e-15, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219513 (regressionFit = 9.219512, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100001 (regressionFit = 9.100000, penalties=1.14E-6) for clause:  wordString(a, "am") => sentenceContainsTarget(_, a).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "for") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "nowHello") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219513 (regressionFit = 9.219512, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219513 (regressionFit = 9.219512, penalties=1.14E-6) for clause:  wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.470589 (regressionFit = 2.470588, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.702704 (regressionFit = 8.702703, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 37.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.466668 (regressionFit = 7.466667, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-1.1399999972244425E-6
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.000002 (regressionFit = -2.77556e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -2.77556e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-2.149999997224443E-6
%  At # nodes expanded = 3, |OPEN| = 12.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -6.315792 (regressionFit = 6.315789, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.315792 (regressionFit = 6.315789, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-2.149999997224443E-6
%  At # nodes expanded = 4, |OPEN| = 11.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -6.315792 (regressionFit = 6.315789, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.315792 (regressionFit = 6.315789, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]' score=-2.4705893652941135
%  At # nodes expanded = 5, |OPEN| = 10.  Pruned 0 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -9.219514 (regressionFit = 9.219512, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100002 (regressionFit = 9.100000, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219514 (regressionFit = 9.219512, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219514 (regressionFit = 9.219512, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.974361 (regressionFit = 8.974359, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100002 (regressionFit = 9.100000, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219514 (regressionFit = 9.219512, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219514 (regressionFit = 9.219512, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.160002 (regressionFit = 6.160000, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -5.090911 (regressionFit = 5.090909, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.466669 (regressionFit = 7.466667, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400002 (regressionFit = 8.400000, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.470590 (regressionFit = 2.470588, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]' score=-2.470590475294114
%  At # nodes expanded = 6, |OPEN| = 26.  Pruned 0 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.974362 (regressionFit = 8.974359, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.060609 (regressionFit = 8.060606, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.060609 (regressionFit = 8.060606, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.974362 (regressionFit = 8.974359, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 1.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.160003 (regressionFit = 6.160000, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.235297 (regressionFit = 8.235294, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 10.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.470591 (regressionFit = 2.470588, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]
%     Score = -5.090912 (regressionFit = 5.090909, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.466670 (regressionFit = 7.466667, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.470591 (regressionFit = 2.470588, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]' score=-5.090911330909087
%  At # nodes expanded = 7, |OPEN| = 25.  Pruned 0 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.974362 (regressionFit = 8.974359, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.875003 (regressionFit = 7.875000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 12.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.060609 (regressionFit = 8.060606, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.740744 (regressionFit = 6.740741, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 17.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.235297 (regressionFit = 8.235294, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 10.0/44.0 pos, 0.0/0.0 neg]
%     Score = -5.090912 (regressionFit = 5.090909, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]
%     Score = -5.090912 (regressionFit = 5.090909, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.875003 (regressionFit = 7.875000, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 12.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -5.090912 (regressionFit = 5.090909, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 22.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]' score=-6.160002039999996
%  At # nodes expanded = 8, |OPEN| = 24.  Pruned 0 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.219515 (regressionFit = 9.219512, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -9.100003 (regressionFit = 9.100000, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "are") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "now") => sentenceContainsTarget(a, b).  [covers 1.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.875003 (regressionFit = 7.875000, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 12.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.740744 (regressionFit = 6.740741, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 17.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.466670 (regressionFit = 7.466667, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -8.400003 (regressionFit = 8.400000, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -6.160003 (regressionFit = 6.160000, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-7.466667686666653
%  At # nodes expanded = 9, |OPEN| = 23.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -9.100002 (regressionFit = 9.100000, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 1.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.875002 (regressionFit = 7.875000, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 12.0/44.0 pos, 0.0/0.0 neg]
%     Score = -7.466669 (regressionFit = 7.466667, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
Comparing variance: -2.5376526277146434E-16 to score=0.0025 #egs=14.0
Comparing variance: 2.590520390792032E-17 to score=0.0025 #egs=30.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 524 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 13:49:13 3/13/17.  [Using 1,749,504 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */


% Clauses:

sentenceContainsTarget(a, b, 0.8581489350995123) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.1418510649004877) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.8581489350995123). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.1418510649004877). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

% Saving model in: train/models/bRDNs/sentenceContainsTarget.model.ckpt
% Time taken to learn 1 trees is 640 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21694214876033008
Set score:0.0025
% Only 44 out of 44 converged.
% Kept 14 of the 14 positive examples.
% Kept 32 of the 92 negative examples.
% Dataset size: 46
Computing probabilities
prob time:2 milliseconds
No hidden examples for : sentenceContainsTarget
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.15114421435935665
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 6 9 11 13 14 17 23 24 25
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 46.0/46.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 46.0/46.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 46.0/46.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000001 (regressionFit = 2.44249e-15, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "Hello") => sentenceContainsTarget(_, a).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "Thank") => sentenceContainsTarget(_, a).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "am") => sentenceContainsTarget(_, a).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662942 (regressionFit = 6.662941, penalties=1.14E-6) for clause:  wordString(a, "fine") => sentenceContainsTarget(_, a).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -2.630109 (regressionFit = 2.630108, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406675 (regressionFit = 6.406674, penalties=1.0200000000000002E-6) for clause:  earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.312261 (regressionFit = 6.312260, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 38.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754359 (regressionFit = 5.754358, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 46.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]' score=-1.1400000024424908E-6
%  At # nodes expanded = 2, |OPEN| = 10.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.000002 (regressionFit = 2.44249e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 2.44249e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]' score=-2.1500000024424912E-6
%  At # nodes expanded = 3, |OPEN| = 11.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4.100274 (regressionFit = 4.100271, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.568877 (regressionFit = 4.568874, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.568877 (regressionFit = 4.568874, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]' score=-2.1500000024424912E-6
%  At # nodes expanded = 4, |OPEN| = 10.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4.100274 (regressionFit = 4.100271, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.100274 (regressionFit = 4.100271, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.568877 (regressionFit = 4.568874, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.568877 (regressionFit = 4.568874, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.44249e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]' score=-2.630109333819068
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 0 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662943 (regressionFit = 6.662941, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662943 (regressionFit = 6.662941, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.397543 (regressionFit = 4.397541, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 21.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406676 (regressionFit = 6.406674, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -3.634334 (regressionFit = 3.634331, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754360 (regressionFit = 5.754358, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996649 (regressionFit = 5.996647, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -2.630110 (regressionFit = 2.630108, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]' score=-2.6301104438190683
%  At # nodes expanded = 6, |OPEN| = 25.  Pruned 0 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.740420 (regressionFit = 6.740417, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.312263 (regressionFit = 6.312260, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 8.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.312263 (regressionFit = 6.312260, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 8.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.879069 (regressionFit = 5.879065, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 12.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.879069 (regressionFit = 5.879065, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 12.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.581688 (regressionFit = 6.581685, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 5.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.397544 (regressionFit = 4.397541, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 21.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996650 (regressionFit = 5.996647, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -2.630111 (regressionFit = 2.630108, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406677 (regressionFit = 6.406674, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -3.634335 (regressionFit = 3.634331, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754361 (regressionFit = 5.754358, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996650 (regressionFit = 5.996647, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -2.630111 (regressionFit = 2.630108, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 27.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/46.0 pos, 0.0/0.0 neg]' score=-3.634333576186349
%  At # nodes expanded = 7, |OPEN| = 24.  Pruned 0 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.107699 (regressionFit = 6.107696, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 10.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.312263 (regressionFit = 6.312260, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 8.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.879069 (regressionFit = 5.879065, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 12.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.812127 (regressionFit = 4.812124, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406677 (regressionFit = 6.406674, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -3.634334 (regressionFit = 3.634331, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 24.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406677 (regressionFit = 6.406674, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996650 (regressionFit = 5.996647, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996650 (regressionFit = 5.996647, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -3.634335 (regressionFit = 3.634331, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 21.0/46.0 pos, 0.0/0.0 neg]' score=-4.3975429567854825
%  At # nodes expanded = 8, |OPEN| = 23.  Pruned 0 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662944 (regressionFit = 6.662941, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "are") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "for") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "thank") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.581688 (regressionFit = 6.581685, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "you") => sentenceContainsTarget(a, b).  [covers 5.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754361 (regressionFit = 5.754358, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.406677 (regressionFit = 6.406674, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/46.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 1.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.812127 (regressionFit = 4.812124, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 19.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754361 (regressionFit = 5.754358, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996650 (regressionFit = 5.996647, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.581688 (regressionFit = 6.581685, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ midWayWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 5.0/46.0 pos, 0.0/0.0 neg]
%     Score = -4.397544 (regressionFit = 4.397541, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 21.0/46.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]' score=-5.754358968961718
%  At # nodes expanded = 9, |OPEN| = 22.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 2.0/46.0 pos, 0.0/0.0 neg]
%     Score = -6.662943 (regressionFit = 6.662941, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.996649 (regressionFit = 5.996647, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 11.0/46.0 pos, 0.0/0.0 neg]
%     Score = -5.754360 (regressionFit = 5.754358, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 13.0/46.0 pos, 0.0/0.0 neg]

***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
Comparing variance: 1.9032394707859825E-16 to score=0.0025 #egs=14.0
Comparing variance: -6.938893903907228E-18 to score=0.0025 #egs=32.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 212 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/46.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 13:49:14 3/13/17.  [Using 1,773,840 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */


% Clauses:

sentenceContainsTarget(a, b, 0.7194734122109542) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.12544463852839138) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.7194734122109542). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.12544463852839138). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

% Saving model in: train/models/bRDNs/sentenceContainsTarget.model.ckpt
% Time taken to learn 2 trees is 904 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.15114421435935665
Set score:0.0025
% Only 46 out of 46 converged.
% Kept 14 of the 14 positive examples.
% Kept 30 of the 92 negative examples.
% Dataset size: 44
Computing probabilities
prob time:1 milliseconds
No hidden examples for : sentenceContainsTarget
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09671288397404085
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 2 15 16 17 26 35 38 39 40
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000001 (regressionFit = -3.77476e-15, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.110063 (regressionFit = 4.110062, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056784 (regressionFit = 4.056783, penalties=1.14E-6) for clause:  wordString(a, "fine") => sentenceContainsTarget(_, a).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.110063 (regressionFit = 4.110062, penalties=1.14E-6) for clause:  wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "Thank") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.386936 (regressionFit = 1.386934, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814071 (regressionFit = 3.814070, penalties=1.0200000000000002E-6) for clause:  earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.000774 (regressionFit = 4.000772, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 39.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744724 (regressionFit = 3.744723, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 44.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-1.1399999962252418E-6
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.000002 (regressionFit = -3.77476e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -3.77476e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-2.1499999962252423E-6
%  At # nodes expanded = 3, |OPEN| = 12.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -2.530221 (regressionFit = 2.530218, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 7.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.815584 (regressionFit = 2.815581, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.815584 (regressionFit = 2.815581, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]' score=-2.1499999962252423E-6
%  At # nodes expanded = 4, |OPEN| = 11.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -2.530221 (regressionFit = 2.530218, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 7.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.530221 (regressionFit = 2.530218, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 7.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.815584 (regressionFit = 2.815581, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.815584 (regressionFit = 2.815581, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -3.77476e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]' score=-1.3869355253610591
%  At # nodes expanded = 5, |OPEN| = 10.  Pruned 0 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4.110064 (regressionFit = 4.110062, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056785 (regressionFit = 4.056783, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.000774 (regressionFit = 4.000772, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056785 (regressionFit = 4.056783, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.746132 (regressionFit = 2.746130, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814072 (regressionFit = 3.814070, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.872364 (regressionFit = 1.872361, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744725 (regressionFit = 3.744723, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814072 (regressionFit = 3.814070, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.386937 (regressionFit = 1.386934, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]' score=-1.386936635361059
%  At # nodes expanded = 6, |OPEN| = 26.  Pruned 0 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -4.110065 (regressionFit = 4.110062, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.000775 (regressionFit = 4.000772, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.879671 (regressionFit = 3.879668, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 7.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.746133 (regressionFit = 2.746130, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.328646 (regressionFit = 3.328643, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.386938 (regressionFit = 1.386934, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.872365 (regressionFit = 1.872361, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744726 (regressionFit = 3.744723, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.386938 (regressionFit = 1.386934, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 26.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]' score=-1.8723636737374327
%  At # nodes expanded = 7, |OPEN| = 25.  Pruned 0 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4.110065 (regressionFit = 4.110062, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 3.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.000775 (regressionFit = 4.000772, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 5.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.593424 (regressionFit = 3.593421, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 11.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.746133 (regressionFit = 2.746130, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.872365 (regressionFit = 1.872361, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.872365 (regressionFit = 1.872361, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744726 (regressionFit = 3.744723, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -1.872365 (regressionFit = 1.872361, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 24.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]' score=-2.7461321428149046
%  At # nodes expanded = 8, |OPEN| = 24.  Pruned 0 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -4.056786 (regressionFit = 4.056783, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.941817 (regressionFit = 3.941814, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "you") => sentenceContainsTarget(a, b).  [covers 6.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "for") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.422599 (regressionFit = 3.422596, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 13.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 2.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.746133 (regressionFit = 2.746130, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744726 (regressionFit = 3.744723, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.814073 (regressionFit = 3.814070, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.879671 (regressionFit = 3.879668, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ midWayWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 7.0/44.0 pos, 0.0/0.0 neg]
%     Score = -2.746133 (regressionFit = 2.746130, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 19.0/44.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]' score=-3.744723887474863
%  At # nodes expanded = 9, |OPEN| = 23.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -4.056785 (regressionFit = 4.056783, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744725 (regressionFit = 3.744723, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]
%     Score = -3.744725 (regressionFit = 3.744723, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 9.0/44.0 pos, 0.0/0.0 neg]

***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
Comparing variance: -2.5376526277146434E-16 to score=0.0025 #egs=14.0
Comparing variance: -7.401486830834377E-18 to score=0.0025 #egs=30.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 182 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/44.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 13:49:14 3/13/17.  [Using 1,789,128 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */


% Clauses:

sentenceContainsTarget(a, b, 0.5553664367462846) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.11231637819360642) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.5553664367462846). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.11231637819360642). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

% Saving model in: train/models/bRDNs/sentenceContainsTarget.model.ckpt
% Time taken to learn 3 trees is 1.136 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.09671288397404085
Set score:0.0025
% Only 44 out of 44 converged.
% Kept 14 of the 14 positive examples.
% Kept 24 of the 92 negative examples.
% Dataset size: 38
Computing probabilities
prob time:3 milliseconds
No hidden examples for : sentenceContainsTarget
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06270334793750586
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 2 4 6 7 10 14 15 16 20 23
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.000001 (regressionFit = 1.72085e-15, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219208 (regressionFit = 2.219207, penalties=1.14E-6) for clause:  wordString(a, "I") => sentenceContainsTarget(_, a).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 1.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219208 (regressionFit = 2.219207, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219208 (regressionFit = 2.219207, penalties=1.14E-6) for clause:  wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.251511 (regressionFit = 0.251510, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172134 (regressionFit = 2.172133, penalties=1.0200000000000002E-6) for clause:  earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.122118 (regressionFit = 2.122116, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 32.0/38.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 38.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]' score=-1.1400000017208458E-6
%  At # nodes expanded = 2, |OPEN| = 8.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.000002 (regressionFit = 1.72085e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 1.72085e-15, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]' score=-2.1500000017208463E-6
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -1.616854 (regressionFit = 1.616851, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.616854 (regressionFit = 1.616851, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.460384 (regressionFit = 1.460381, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]' score=-2.1500000017208463E-6
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -1.616854 (regressionFit = 1.616851, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.616854 (regressionFit = 1.616851, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.460384 (regressionFit = 1.460381, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.460384 (regressionFit = 1.460381, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 1.72085e-15, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]' score=-0.2515112256159974
%  At # nodes expanded = 5, |OPEN| = 7.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.263593 (regressionFit = 2.263591, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219209 (regressionFit = 2.219207, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.371875 (regressionFit = 1.371873, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 16.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172135 (regressionFit = 2.172133, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.131798 (regressionFit = 1.131795, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012083 (regressionFit = 2.012081, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.251512 (regressionFit = 0.251510, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]' score=-0.2515123356159974
%  At # nodes expanded = 6, |OPEN| = 19.  Pruned 0 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.263594 (regressionFit = 2.263591, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.068877 (regressionFit = 2.068873, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.068877 (regressionFit = 2.068873, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172136 (regressionFit = 2.172133, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172136 (regressionFit = 2.172133, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.371876 (regressionFit = 1.371873, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 16.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.251513 (regressionFit = 0.251510, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172136 (regressionFit = 2.172133, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.131799 (regressionFit = 1.131795, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012084 (regressionFit = 2.012081, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]
%     Score = -0.251513 (regressionFit = 0.251510, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 23.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]' score=-1.131797670271981
%  At # nodes expanded = 7, |OPEN| = 18.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.263594 (regressionFit = 2.263591, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.068877 (regressionFit = 2.068873, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 7.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.476258 (regressionFit = 1.476255, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 15.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.131799 (regressionFit = 1.131795, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.131799 (regressionFit = 1.131795, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012084 (regressionFit = 2.012081, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.131799 (regressionFit = 1.131795, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 18.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 16.0/38.0 pos, 0.0/0.0 neg]' score=-1.3718752888145218
%  At # nodes expanded = 8, |OPEN| = 17.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "fine") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "you") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.816465 (regressionFit = 1.816462, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 11.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172136 (regressionFit = 2.172133, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.476258 (regressionFit = 1.476255, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 15.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012084 (regressionFit = 2.012081, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.172136 (regressionFit = 2.172133, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ midWayWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 5.0/38.0 pos, 0.0/0.0 neg]
%     Score = -1.371876 (regressionFit = 1.371873, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/38.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]' score=-2.0120827949279647
%  At # nodes expanded = 9, |OPEN| = 16.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012084 (regressionFit = 2.012081, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.219210 (regressionFit = 2.219207, penalties=3.0300000000000006E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 4.0/38.0 pos, 0.0/0.0 neg]
%     Score = -2.012084 (regressionFit = 2.012081, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/38.0 pos, 0.0/0.0 neg]

***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
Comparing variance: 1.2688263138573217E-16 to score=0.0025 #egs=14.0
Comparing variance: -2.3129646346357427E-18 to score=0.0025 #egs=24.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 102 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/38.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 13:49:14 3/13/17.  [Using 1,820,328 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

sentenceContainsTarget(a, b, 0.4175135841583098) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.10159632948783635) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.4175135841583098). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.10159632948783635). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

% Saving model in: train/models/bRDNs/sentenceContainsTarget.model.ckpt
% Time taken to learn 4 trees is 1.280 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06270334793750586
Set score:0.0025
% Only 38 out of 38 converged.
% Kept 14 of the 14 positive examples.
% Kept 21 of the 92 negative examples.
% Dataset size: 35
Computing probabilities
prob time:3 milliseconds
No hidden examples for : sentenceContainsTarget
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04101651417481148
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 2 5 11 12 14 15 16 17 21
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 35.0/35.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 35.0/35.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 35.0/35.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.000001 (regressionFit = -2.77556e-16, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "Hello") => sentenceContainsTarget(_, a).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=1.14E-6) for clause:  wordString(a, "I") => sentenceContainsTarget(_, a).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 2.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.159510 (regressionFit = 0.159509, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276070 (regressionFit = 1.276069, penalties=1.0200000000000002E-6) for clause:  earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276071 (regressionFit = 1.276069, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 30.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 35.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]' score=-1.1399999997224443E-6
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.000002 (regressionFit = -2.77556e-16, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -2.77556e-16, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]' score=-2.149999999722445E-6
%  At # nodes expanded = 3, |OPEN| = 10.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.897239 (regressionFit = 0.897236, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.990057 (regressionFit = 0.990054, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.990057 (regressionFit = 0.990054, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]' score=-2.149999999722445E-6
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.897239 (regressionFit = 0.897236, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.897239 (regressionFit = 0.897236, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.990057 (regressionFit = 0.990054, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.990057 (regressionFit = 0.990054, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = -2.77556e-16, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]' score=-0.15950979623537787
%  At # nodes expanded = 5, |OPEN| = 8.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 2.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345856 (regressionFit = 1.345854, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.797545 (regressionFit = 0.797543, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276071 (regressionFit = 1.276069, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.629642 (regressionFit = 0.629639, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104293 (regressionFit = 1.104291, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.159511 (regressionFit = 0.159509, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]' score=-0.15951090623537786
%  At # nodes expanded = 6, |OPEN| = 21.  Pruned 0 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "off") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 2.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.152010 (regressionFit = 1.152007, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 8.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.152010 (regressionFit = 1.152007, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.312091 (regressionFit = 1.312087, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 4.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.196318 (regressionFit = 1.196315, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.196318 (regressionFit = 1.196315, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.312090 (regressionFit = 1.312087, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 4.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.797546 (regressionFit = 0.797543, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.152010 (regressionFit = 1.152007, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.159512 (regressionFit = 0.159509, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276073 (regressionFit = 1.276069, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.629643 (regressionFit = 0.629639, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104294 (regressionFit = 1.104291, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.159512 (regressionFit = 0.159509, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 20.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]' score=-0.6296417119817554
%  At # nodes expanded = 7, |OPEN| = 20.  Pruned 0 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 2.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345858 (regressionFit = 1.345854, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.152010 (regressionFit = 1.152007, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.196318 (regressionFit = 1.196315, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.196318 (regressionFit = 1.196315, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 7.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.870050 (regressionFit = 0.870047, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 13.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.629643 (regressionFit = 0.629639, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.629643 (regressionFit = 0.629639, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104294 (regressionFit = 1.104291, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.629643 (regressionFit = 0.629639, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 16.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 14.0/35.0 pos, 0.0/0.0 neg]' score=-0.7975453711768903
%  At # nodes expanded = 8, |OPEN| = 19.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "are") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "fine") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -0.996932 (regressionFit = 0.996929, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 11.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276072 (regressionFit = 1.276069, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104294 (regressionFit = 1.104291, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.312090 (regressionFit = 1.312087, penalties=2.9400000000000007E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ midWayWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 4.0/35.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]' score=-1.1042927962449256
%  At # nodes expanded = 9, |OPEN| = 18.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(b, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(b, "I") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 1.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.345857 (regressionFit = 1.345854, penalties=3.050000000000001E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 3.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104294 (regressionFit = 1.104291, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.276072 (regressionFit = 1.276069, penalties=3.0300000000000006E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 5.0/35.0 pos, 0.0/0.0 neg]
%     Score = -1.104294 (regressionFit = 1.104291, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 9.0/35.0 pos, 0.0/0.0 neg]

***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
Comparing variance: -3.172065784643304E-17 to score=0.0025 #egs=14.0
Comparing variance: 7.93016446160826E-18 to score=0.0025 #egs=21.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 96 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 14.0/35.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 13:49:14 3/13/17.  [Using 1,829,200 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.09269127618926093;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


% Clauses:

sentenceContainsTarget(a, b, 0.3207118471601497) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.09269127618926093) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.3207118471601497). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.09269127618926093). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

% Saving model in: train/models/bRDNs/sentenceContainsTarget.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for sentenceContainsTarget.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).

logPrior(-1.8).
sentenceContainsTarget(a, b, total) :- // A general accessor. 
   sentenceContainsTarget(a, b, 1000000, total), !.
sentenceContainsTarget(a, b, total) :- waitHere("This should not fail", sentenceContainsTarget(a, b, total)).

sentenceContainsTarget(a, b, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_sentenceContainsTarget_tree1(a, b, treesToUse, total1),
   getScore_sentenceContainsTarget_tree2(a, b, treesToUse, total2),
   getScore_sentenceContainsTarget_tree3(a, b, treesToUse, total3),
   getScore_sentenceContainsTarget_tree4(a, b, treesToUse, total4),
   getScore_sentenceContainsTarget_tree5(a, b, treesToUse, total5),
   total is logPrior + total1 + total2 + total3 + total4 + total5,
   !.
sentenceContainsTarget(a, b, treesToUse, total) :- waitHere("This should not fail", sentenceContainsTarget(a, b, treesToUse, total)).

getScore_sentenceContainsTarget_tree1(a, b, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_sentenceContainsTarget_tree1(a, b, treesToUse, total1) :- sentenceContainsTarget_tree1(a, b, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_sentenceContainsTarget_tree2(a, b, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_sentenceContainsTarget_tree2(a, b, treesToUse, total2) :- sentenceContainsTarget_tree2(a, b, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_sentenceContainsTarget_tree3(a, b, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_sentenceContainsTarget_tree3(a, b, treesToUse, total3) :- sentenceContainsTarget_tree3(a, b, total), stepLength_tree3(stepLen), total3 is total * stepLen.

getScore_sentenceContainsTarget_tree4(a, b, treesToUse, 0.0) :- 4 > treesToUse, !.
getScore_sentenceContainsTarget_tree4(a, b, treesToUse, total4) :- sentenceContainsTarget_tree4(a, b, total), stepLength_tree4(stepLen), total4 is total * stepLen.

getScore_sentenceContainsTarget_tree5(a, b, treesToUse, 0.0) :- 5 > treesToUse, !.
getScore_sentenceContainsTarget_tree5(a, b, treesToUse, total5) :- sentenceContainsTarget_tree5(a, b, total), stepLength_tree5(stepLen), total5 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(sentenceContainsTarget, 1, [
   wordString(A, "you")]).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:2.4865656878765297
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 11 21 27 36 45 53 67 75 76 77
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 131.0/131.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 131.0/131.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 131.0/131.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.354317 (regressionFit = 0.354316, penalties=1.14E-6) for clause:  wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.354317): wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -313.784100 (regressionFit = 313.784099, penalties=1.14E-6) for clause:  wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -307.816096 (regressionFit = 307.816094, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680888 (regressionFit = 301.680887, penalties=1.14E-6) for clause:  wordString(a, "am") => sentenceContainsTarget(_, a).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -64.481122 (regressionFit = 64.481121, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]
%     Score = -281.567096 (regressionFit = 281.567095, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 117.0/131.0 pos, 0.0/0.0 neg]
%     Score = -224.998747 (regressionFit = 224.998746, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 131.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]' score=-0.3543173117183949
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.354318 (regressionFit = 0.354316, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354318 (regressionFit = 0.354316, penalties=2.1500000000000006E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]' score=-0.3543183217183949
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -222.362331 (regressionFit = 222.362328, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 35.0/131.0 pos, 0.0/0.0 neg]
%     Score = -314.488105 (regressionFit = 314.488102, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 5.0/131.0 pos, 0.0/0.0 neg]
%     Score = -241.517195 (regressionFit = 241.517192, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 30.0/131.0 pos, 0.0/0.0 neg]
%     Score = -241.517195 (regressionFit = 241.517192, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 30.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'wordString(b, "you") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]' score=-0.3543183217183949
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -222.362331 (regressionFit = 222.362328, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 35.0/131.0 pos, 0.0/0.0 neg]
%     Score = -222.362331 (regressionFit = 222.362328, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 35.0/131.0 pos, 0.0/0.0 neg]
%     Score = -314.488105 (regressionFit = 314.488102, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 5.0/131.0 pos, 0.0/0.0 neg]
%     Score = -241.517195 (regressionFit = 241.517192, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 30.0/131.0 pos, 0.0/0.0 neg]
%     Score = -241.517195 (regressionFit = 241.517192, penalties=2.9700000000000004E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 30.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.1600000000000002E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.260000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
%     Score = -0.354319 (regressionFit = 0.354316, penalties=3.160000000000001E-6) for clause:  wordString(b, "you") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 70.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]' score=-64.48112166826523
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -313.784101 (regressionFit = 313.784099, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -307.816097 (regressionFit = 307.816094, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680889 (regressionFit = 301.680887, penalties=2.1500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -313.784101 (regressionFit = 313.784099, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -294.412237 (regressionFit = 294.412235, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 10.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680889 (regressionFit = 301.680887, penalties=2.0500000000000003E-6) for clause:  nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -173.936969 (regressionFit = 173.936967, penalties=2.0400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 38.0/131.0 pos, 0.0/0.0 neg]
%     Score = -129.316098 (regressionFit = 129.316096, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]
%     Score = -224.998748 (regressionFit = 224.998746, penalties=2.1300000000000004E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]
%     Score = -270.491554 (regressionFit = 270.491552, penalties=2.0300000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 17.0/131.0 pos, 0.0/0.0 neg]
%     Score = -64.481123 (regressionFit = 64.481121, penalties=2.24E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]' score=-64.48112277826523
%  At # nodes expanded = 6, |OPEN| = 16.  Pruned 0 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -307.816098 (regressionFit = 307.816094, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -294.412238 (regressionFit = 294.412235, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 10.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -250.198652 (regressionFit = 250.198649, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 22.0/131.0 pos, 0.0/0.0 neg]
%     Score = -250.198652 (regressionFit = 250.198649, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 22.0/131.0 pos, 0.0/0.0 neg]
%     Score = -257.070602 (regressionFit = 257.070598, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 20.0/131.0 pos, 0.0/0.0 neg]
%     Score = -257.070602 (regressionFit = 257.070598, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 20.0/131.0 pos, 0.0/0.0 neg]
%     Score = -173.936971 (regressionFit = 173.936967, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 38.0/131.0 pos, 0.0/0.0 neg]
%     Score = -244.161571 (regressionFit = 244.161568, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 23.0/131.0 pos, 0.0/0.0 neg]
%     Score = -64.481124 (regressionFit = 64.481121, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]
%     Score = -129.316099 (regressionFit = 129.316096, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]
%     Score = -224.998749 (regressionFit = 224.998746, penalties=3.1400000000000013E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]
%     Score = -270.491555 (regressionFit = 270.491552, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 17.0/131.0 pos, 0.0/0.0 neg]
%     Score = -64.481124 (regressionFit = 64.481121, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 54.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]' score=-129.31609796624724
%  At # nodes expanded = 7, |OPEN| = 15.  Pruned 0 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -307.816098 (regressionFit = 307.816094, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.260000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -294.412238 (regressionFit = 294.412235, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 10.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -241.981153 (regressionFit = 241.981150, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 24.0/131.0 pos, 0.0/0.0 neg]
%     Score = -250.198652 (regressionFit = 250.198649, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 22.0/131.0 pos, 0.0/0.0 neg]
%     Score = -257.070602 (regressionFit = 257.070598, penalties=3.1600000000000002E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 20.0/131.0 pos, 0.0/0.0 neg]
%     Score = -189.261902 (regressionFit = 189.261899, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 35.0/131.0 pos, 0.0/0.0 neg]
%     Score = -271.889968 (regressionFit = 271.889965, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 17.0/131.0 pos, 0.0/0.0 neg]
%     Score = -129.316099 (regressionFit = 129.316096, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]
%     Score = -129.316099 (regressionFit = 129.316096, penalties=3.2500000000000006E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]
%     Score = -237.433373 (regressionFit = 237.433370, penalties=3.240000000000001E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 25.0/131.0 pos, 0.0/0.0 neg]
%     Score = -270.491555 (regressionFit = 270.491552, penalties=3.1400000000000004E-6) for clause:  nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 17.0/131.0 pos, 0.0/0.0 neg]
%     Score = -129.316099 (regressionFit = 129.316096, penalties=3.35E-6) for clause:  nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 45.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 38.0/131.0 pos, 0.0/0.0 neg]' score=-173.93696946566294
%  At # nodes expanded = 8, |OPEN| = 14.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -313.784102 (regressionFit = 313.784099, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=3.06E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -297.599398 (regressionFit = 297.599395, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "you") => sentenceContainsTarget(a, b).  [covers 9.0/131.0 pos, 0.0/0.0 neg]
%     Score = -301.680890 (regressionFit = 301.680887, penalties=2.9600000000000005E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "thank") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -242.180114 (regressionFit = 242.180111, penalties=2.95E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 24.0/131.0 pos, 0.0/0.0 neg]
%     Score = -189.261902 (regressionFit = 189.261899, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 35.0/131.0 pos, 0.0/0.0 neg]
%     Score = -224.998749 (regressionFit = 224.998746, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]
%     Score = -270.491555 (regressionFit = 270.491552, penalties=3.04E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 17.0/131.0 pos, 0.0/0.0 neg]
%     Score = -173.936971 (regressionFit = 173.936967, penalties=3.1500000000000008E-6) for clause:  nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 38.0/131.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]' score=-224.9987465555996
%  At # nodes expanded = 9, |OPEN| = 13.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -301.680889 (regressionFit = 301.680887, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/131.0 pos, 0.0/0.0 neg]
%     Score = -237.433372 (regressionFit = 237.433370, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/131.0 pos, 0.0/0.0 neg]
%     Score = -224.998748 (regressionFit = 224.998746, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/131.0 pos, 0.0/0.0 neg]

***** Warning: #6 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
Comparing variance: 3.2481953634747435E-14 to score=0.0025 #egs=70.0
Comparing variance: 0.005808461831411822 to score=0.0025 #egs=61.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 61.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.005808)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.005808) into the LAST position (#1) in the search queue.

% Time for loop #1: 146 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      wordString(a, "you") => sentenceContainsTarget(_, a).  [covers 70.0/131.0 pos, 0.0/0.0 neg]
% This clause covers 70 positive examples, of which 70 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 11 12 17 18 24 26 32 38 39 45
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 61.0/61.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 61.0/61.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 61.0/61.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.347795 (regressionFit = 0.347794, penalties=1.14E-6) for clause:  wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.347795): wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324305 (regressionFit = 0.324304, penalties=1.14E-6) for clause:  wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.324305): wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.350426 (regressionFit = 0.350425, penalties=1.14E-6) for clause:  wordString(a, "nowHello") => sentenceContainsTarget(_, a).  [covers 5.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.351805 (regressionFit = 0.351804, penalties=1.14E-6) for clause:  wordString(a, "fine") => sentenceContainsTarget(_, a).  [covers 5.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.352547 (regressionFit = 0.352545, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 54.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348763 (regressionFit = 0.348762, penalties=1.0200000000000002E-6) for clause:  earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.352644 (regressionFit = 0.352642, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 47.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.352222 (regressionFit = 0.352221, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 61.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 4.0/61.0 pos, 0.0/0.0 neg]' score=-0.32430538211449517
%  At # nodes expanded = 2, |OPEN| = 8.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.324306 (regressionFit = 0.324304, penalties=2.1500000000000006E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324306 (regressionFit = 0.324304, penalties=2.1500000000000006E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324306 (regressionFit = 0.324304, penalties=2.1500000000000006E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'wordString(b, "youBye") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]' score=-0.32430639211449513
%  At # nodes expanded = 3, |OPEN| = 12.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0.324307 (regressionFit = 0.324304, penalties=2.9700000000000004E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.06E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'wordString(b, "youBye") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]' score=-0.32430639211449513
%  At # nodes expanded = 4, |OPEN| = 11.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.324307 (regressionFit = 0.324304, penalties=2.9700000000000004E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.050000000000001E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.1600000000000002E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.160000000000001E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'wordString(b, "youBye") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]' score=-0.32430639211449513
%  At # nodes expanded = 5, |OPEN| = 10.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9700000000000004E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9700000000000004E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, b, c) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.1600000000000002E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324308 (regressionFit = 0.324304, penalties=3.260000000000001E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.324307 (regressionFit = 0.324304, penalties=3.160000000000001E-6) for clause:  wordString(b, "youBye") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/61.0 pos, 0.0/0.0 neg]' score=-0.3477950039881706
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.347796 (regressionFit = 0.347794, penalties=2.1500000000000006E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 5.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'wordString(b, "please") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 5.0/61.0 pos, 0.0/0.0 neg]' score=-0.34779601398817056
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.347797 (regressionFit = 0.347794, penalties=2.9700000000000004E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 5.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.347797 (regressionFit = 0.347794, penalties=3.1600000000000002E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 5.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'earlyWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]' score=-0.3487629078866635
%  At # nodes expanded = 8, |OPEN| = 8.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.348764 (regressionFit = 0.348762, penalties=2.1300000000000004E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348764 (regressionFit = 0.348762, penalties=2.0300000000000005E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348764 (regressionFit = 0.348762, penalties=2.1300000000000004E-6) for clause:  earlyWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=2] 'earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]' score=-0.34876391788666344
%  At # nodes expanded = 9, |OPEN| = 10.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.319417 (regressionFit = 0.319414, penalties=2.9500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.319417): earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.319417 (regressionFit = 0.319414, penalties=2.9500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348765 (regressionFit = 0.348762, penalties=3.1400000000000013E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 2.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348765 (regressionFit = 0.348762, penalties=3.04E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348765 (regressionFit = 0.348762, penalties=3.0400000000000005E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]
%     Score = -0.348765 (regressionFit = 0.348762, penalties=3.1400000000000013E-6) for clause:  earlyWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 7.0/61.0 pos, 0.0/0.0 neg]

***** Warning: #7 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% The best node found: earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.006.
% Will extend: earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
Comparing variance: 0.003153742202632308 to score=0.0025 #egs=4.0
Comparing variance: 0.005382443226434812 to score=0.0025 #egs=57.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 57.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.005382)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0.005382) into the LAST position (#1) in the search queue.

% Time for loop #2: 42 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      earlyWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 4.0/61.0 pos, 0.0/0.0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 5 25 28 30 42 43 49 55
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 57.0/57.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 57.0/57.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 57.0/57.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.306549 (regressionFit = 0.306548, penalties=1.14E-6) for clause:  wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.306549): wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304577 (regressionFit = 0.304576, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.304577): wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "youBye") => sentenceContainsTarget(_, a).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306536 (regressionFit = 0.306534, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304916 (regressionFit = 0.304915, penalties=1.14E-6) for clause:  wordString(a, "am") => sentenceContainsTarget(_, a).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305544 (regressionFit = 0.305543, penalties=1.14E-6) for clause:  wordString(a, "fine") => sentenceContainsTarget(_, a).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306206 (regressionFit = 0.306205, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 50.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302088 (regressionFit = 0.302087, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.302088): earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297924 (regressionFit = 0.297923, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.297924): midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 57.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]' score=-0.29792446639630166
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304917 (regressionFit = 0.304915, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305545 (regressionFit = 0.305543, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297926 (regressionFit = 0.297923, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306083 (regressionFit = 0.306081, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297925 (regressionFit = 0.297923, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=2] 'midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]' score=-0.2979254763963016
%  At # nodes expanded = 3, |OPEN| = 15.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9500000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9500000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306657 (regressionFit = 0.306654, penalties=2.9500000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 13.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306657 (regressionFit = 0.306654, penalties=2.9500000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 13.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306276 (regressionFit = 0.306273, penalties=2.9300000000000007E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, b, c) => sentenceContainsTarget(a, b).  [covers 12.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297927 (regressionFit = 0.297923, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302974 (regressionFit = 0.302971, penalties=2.9300000000000007E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 10.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297926 (regressionFit = 0.297923, penalties=3.04E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306084 (regressionFit = 0.306081, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297926 (regressionFit = 0.297923, penalties=3.0400000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=2] 'midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]' score=-0.29792557639630163
%  At # nodes expanded = 4, |OPEN| = 14.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297926 (regressionFit = 0.297923, penalties=3.04E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306084 (regressionFit = 0.306081, penalties=3.240000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306276 (regressionFit = 0.306273, penalties=2.9300000000000007E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 12.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.297927 (regressionFit = 0.297923, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=1] 'earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]' score=-0.3020884937533294
%  At # nodes expanded = 5, |OPEN| = 13.  Pruned 0 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.306550 (regressionFit = 0.306548, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306537 (regressionFit = 0.306534, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304917 (regressionFit = 0.304915, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305545 (regressionFit = 0.305543, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Hello") => sentenceContainsTarget(a, _).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305018 (regressionFit = 0.305016, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 22.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299932 (regressionFit = 0.299930, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.303052 (regressionFit = 0.303049, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "I") => sentenceContainsTarget(a, _).  [covers 20.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.298770 (regressionFit = 0.298768, penalties=2.24E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299805 (regressionFit = 0.299803, penalties=2.0300000000000005E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302090 (regressionFit = 0.302087, penalties=2.24E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302090 (regressionFit = 0.302087, penalties=2.24E-6) for clause:  earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302090 (regressionFit = 0.302087, penalties=2.3400000000000005E-6) for clause:  earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=2] 'earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]' score=-0.29876988837574286
%  At # nodes expanded = 6, |OPEN| = 26.  Pruned 0 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -0.306551 (regressionFit = 0.306548, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306538 (regressionFit = 0.306534, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302506 (regressionFit = 0.302503, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 20.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.303053 (regressionFit = 0.303049, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 20.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306551 (regressionFit = 0.306548, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306299 (regressionFit = 0.306296, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 10.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299806 (regressionFit = 0.299803, penalties=3.04E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.298771 (regressionFit = 0.298768, penalties=3.1500000000000008E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302742 (regressionFit = 0.302739, penalties=3.1500000000000008E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 31.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.298771 (regressionFit = 0.298768, penalties=3.2500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306084 (regressionFit = 0.306081, penalties=3.240000000000001E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 25.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306132 (regressionFit = 0.306129, penalties=3.1400000000000004E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.298771 (regressionFit = 0.298768, penalties=3.35E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=2] 'earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]' score=-0.2998053858250219
%  At # nodes expanded = 7, |OPEN| = 25.  Pruned 0 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.050000000000001E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299806 (regressionFit = 0.299803, penalties=3.04E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299806 (regressionFit = 0.299803, penalties=3.0300000000000006E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299806 (regressionFit = 0.299803, penalties=3.1400000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 15.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=2] 'earlyWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]' score=-0.2999317489145605
%  At # nodes expanded = 8, |OPEN| = 24.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.306537 (regressionFit = 0.306534, penalties=2.9700000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "youBye") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.160000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "youBye") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "youBye") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=2] 'earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]' score=-0.3020895037533294
%  At # nodes expanded = 9, |OPEN| = 23.  Pruned 0 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0.306551 (regressionFit = 0.306548, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 4.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306538 (regressionFit = 0.306534, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.304918 (regressionFit = 0.304915, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305546 (regressionFit = 0.305543, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "Hello") => sentenceContainsTarget(a, _).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305019 (regressionFit = 0.305016, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 22.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.303053 (regressionFit = 0.303049, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ wordString(b, "I") => sentenceContainsTarget(a, _).  [covers 20.0/57.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "how") => sentenceContainsTarget(a, _).  [covers 1.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.305019 (regressionFit = 0.305016, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, _).  [covers 22.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.303053 (regressionFit = 0.303049, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ wordString(c, "am") => sentenceContainsTarget(a, _).  [covers 20.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.298771 (regressionFit = 0.298768, penalties=3.1500000000000008E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 41.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302182 (regressionFit = 0.302179, penalties=2.9400000000000007E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302090 (regressionFit = 0.302087, penalties=3.1500000000000008E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.299933 (regressionFit = 0.299930, penalties=3.04E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, c) => sentenceContainsTarget(a, _).  [covers 18.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302091 (regressionFit = 0.302087, penalties=3.2500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.306084 (regressionFit = 0.306081, penalties=3.1400000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 25.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302090 (regressionFit = 0.302087, penalties=3.1400000000000004E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]
%     Score = -0.302091 (regressionFit = 0.302087, penalties=3.35E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 43.0/57.0 pos, 0.0/0.0 neg]

***** Warning: #8 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]

% The best node found: midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.005.
% Will extend: midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
Comparing variance: 0.005324655385420136 to score=0.0025 #egs=28.0
Comparing variance: 0.005132175710501305 to score=0.0025 #egs=29.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 28.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.005325)
%         ILP node to extend: midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0.005325) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 29.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.005132)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0.005132) into the LAST position (#2) in the search queue.

% Time for loop #3: 147 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/57.0 pos, 0.0/0.0 neg]
% This clause covers 28 positive examples, of which 28 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]'
%     Score = -0.297924 (regressionFit = 0.297923, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 0 3 5 6 7 8 10 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]' score=-0.29792446639630166
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131499 (regressionFit = 0.131497, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.131499): midWayWordInSentence(a, b) ^ wordString(b, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149066 (regressionFit = 0.149064, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142427 (regressionFit = 0.142425, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144375 (regressionFit = 0.144373, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146513 (regressionFit = 0.146511, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131500 (regressionFit = 0.131497, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=2] 'midWayWordInSentence(a, b) ^ wordString(b, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]' score=-0.13149948946753787
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=2] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]' score=-0.13149957946753785
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 0 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149067 (regressionFit = 0.149064, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142428 (regressionFit = 0.142425, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144376 (regressionFit = 0.144373, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146514 (regressionFit = 0.146511, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146779 (regressionFit = 0.146776, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141158 (regressionFit = 0.141155, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138067 (regressionFit = 0.138064, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.240000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.147992 (regressionFit = 0.147989, penalties=3.0300000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.1400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]' score=-0.13150058946753787
%  At # nodes expanded = 4, |OPEN| = 23.  Pruned 0 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149068 (regressionFit = 0.149064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142429 (regressionFit = 0.142425, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144377 (regressionFit = 0.144373, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "am") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "youBye") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "for") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.126385 (regressionFit = 0.126381, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.126385): midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ earlyWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ midWayWordInSentence(a, d) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]' score=-0.13150058946753787
%  At # nodes expanded = 5, |OPEN| = 22.  Pruned 0 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149068 (regressionFit = 0.149064, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142429 (regressionFit = 0.142425, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144377 (regressionFit = 0.144373, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.250000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.147993 (regressionFit = 0.147989, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.147993 (regressionFit = 0.147989, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ earlyWordInSentence(a, d) ^ nextWordInSentence(a, d, c) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.15E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.15E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]' score=-0.13150058946753787
%  At # nodes expanded = 6, |OPEN| = 21.  Pruned 0 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149068 (regressionFit = 0.149064, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142429 (regressionFit = 0.142425, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144377 (regressionFit = 0.144373, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "am") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.148118 (regressionFit = 0.148114, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, b, c) => sentenceContainsTarget(a, b).  [covers 12.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.250000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.147993 (regressionFit = 0.147989, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.940000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, d) ^ nextWordInSentence(a, c, d) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.134656 (regressionFit = 0.134652, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 10.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.15E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.15E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "Fudge") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]' score=-0.13150059946753787
%  At # nodes expanded = 7, |OPEN| = 20.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.131501 (regressionFit = 0.131497, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") ^ nextWordInSentence(a, b, c) ^ wordString(c, "off") => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 3.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]' score=-0.13150068946753785
%  At # nodes expanded = 8, |OPEN| = 19.  Pruned 0 variant children.  Sending 22 items to OPEN for evaluation and possible insertion.
% Have created 22 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149068 (regressionFit = 0.149064, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142429 (regressionFit = 0.142425, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144377 (regressionFit = 0.144373, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "fine") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146780 (regressionFit = 0.146776, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 13.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.141159 (regressionFit = 0.141155, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 11.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 1.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.149068 (regressionFit = 0.149064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.142429 (regressionFit = 0.142425, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "how") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.144377 (regressionFit = 0.144373, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "thank") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 2.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.147993 (regressionFit = 0.147989, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 15.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, b, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.150000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.250000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.148118 (regressionFit = 0.148114, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 12.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.131502 (regressionFit = 0.131497, penalties=4.250000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 25.0/28.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #4, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]' score=-0.1380668248824508
%  At # nodes expanded = 9, |OPEN| = 18.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.142429 (regressionFit = 0.142425, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ wordString(b, "nowHello") => sentenceContainsTarget(a, b).  [covers 5.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ wordString(b, "for") => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.146515 (regressionFit = 0.146511, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 4.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]
%     Score = -0.138068 (regressionFit = 0.138064, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 9.0/28.0 pos, 0.0/0.0 neg]

***** Warning: #9 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]

% The best node found: midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -0.005.
% Will extend: midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0038429238630295665 to score=0.0025 #egs=14.0
Comparing variance: 0.005184312216374902 to score=0.0025 #egs=14.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 14.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0.003843)
%         ILP node to extend: midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0.003843) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 14.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0.005184)
%         ILP node to extend: midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/28.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -0.005184) into position #1 in the search queue (new size=3).

% Time for loop #4: 142 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, b) => sentenceContainsTarget(a, b).  [covers 14.0/28.0 pos, 0.0/0.0 neg]
% This clause covers 14 positive examples, of which 14 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 28.0/14.0 pos, 0.0/0.0 neg]'
%     Score = -0.297924 (regressionFit = 0.297923, penalties=1.0200000000000002E-6) for clause:  midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/14.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=1] 'midWayWordInSentence(a, b) => sentenceContainsTarget(a, b).  [covers 14.0/14.0 pos, 0.0/0.0 neg]' score=-0.29792446639630166
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059026 (regressionFit = 0.059024, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.059026): midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065230 (regressionFit = 0.065228, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 14.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065230 (regressionFit = 0.065228, penalties=2.1300000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 14.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=2] 'midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]' score=-0.05902581904960771
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.059027 (regressionFit = 0.059024, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059027 (regressionFit = 0.059024, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059027 (regressionFit = 0.059024, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]' score=-0.0590268290496077
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.870000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.95E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, b, c) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]' score=-0.059026929049607706
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.95E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]' score=-0.059026929049607706
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=2] 'midWayWordInSentence(a, b) ^ wordString(b, "Fudge") => sentenceContainsTarget(a, b).  [covers 3.0/14.0 pos, 0.0/0.0 neg]' score=-0.06523021631351887
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -0.065231 (regressionFit = 0.065228, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "Fudge") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=2] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]' score=-0.06523030631351888
%  At # nodes expanded = 7, |OPEN| = 5.  Pruned 0 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059027 (regressionFit = 0.059024, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.050000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065231 (regressionFit = 0.065228, penalties=3.240000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065231 (regressionFit = 0.065228, penalties=3.0300000000000006E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065231 (regressionFit = 0.065228, penalties=3.1400000000000013E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #5, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]' score=-0.0590268290496077
%  At # nodes expanded = 8, |OPEN| = 12.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0.059028 (regressionFit = 0.059024, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.16E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #5, bodyLen=3] 'midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]' score=-0.06523120631351888
%  At # nodes expanded = 9, |OPEN| = 11.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "how") => sentenceContainsTarget(a, b).  [covers 1.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, b).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "Hello") => sentenceContainsTarget(a, b).  [covers 1.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.059028 (regressionFit = 0.059024, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 2.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065232 (regressionFit = 0.065228, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]
%     Score = -0.065232 (regressionFit = 0.065228, penalties=4.040000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 11.0/14.0 pos, 0.0/0.0 neg]

***** Warning: #10 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% The best node found: midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]

% Expanding node at Level 4 with score = -0.005.
% Will extend: midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
Comparing variance: 0.005159062935783165 to score=0.0025 #egs=8.0
Comparing variance: 0.0029585459272237304 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0.005159)
%         ILP node to extend: midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -0.005159) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #5: 67 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/14.0 pos, 0.0/0.0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -0.059026 (regressionFit = 0.059024, penalties=2.0400000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

***** Warning: % Have only 8 positive examples, so cannot choose 10 of them. *****


% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-0.05902581904960771
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.970000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.870000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=4] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 10.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.980000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.080000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.870000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ wordString(c, "fine") ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=4] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.980000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.880000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ wordString(d, "thank") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.97E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, d) ^ nextWordInSentence(a, d, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1700000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.96E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=4] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 7, |OPEN| = 8.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.080000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.080000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1700000000000005E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=4] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 8, |OPEN| = 7.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.870000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ wordString(c, "fine") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.96E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ nextWordInSentence(a, b, c) ^ midWayWordInSentence(a, c) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=4] 'midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.080000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.9700000000000015E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.980000000000001E-6) for clause:  midWayWordInSentence(a, b) ^ wordString(b, "am") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

***** Warning: #11 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -0.0590):
%  midWayWordInSentence(a, b) ^ wordString(b, "am") => sentenceContainsTarget(a, b).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (wordString(b, "am") => sentenceContainsTarget(a, b))

% Have these 8 positive seeds: 1 3 6 11 13 15 17 18
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 29.0/29.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 29.0/29.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 29.0/29.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.141811 (regressionFit = 0.141810, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.141811): wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.146232 (regressionFit = 0.146231, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.148017 (regressionFit = 0.148016, penalties=1.14E-6) for clause:  wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 4.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140846 (regressionFit = 0.140845, penalties=1.14E-6) for clause:  wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.140846): wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.148712 (regressionFit = 0.148711, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 22.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.147287 (regressionFit = 0.147286, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 18.0/29.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 29.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=1] 'wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]' score=-0.14084575487717854
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.140847 (regressionFit = 0.140845, penalties=2.1500000000000006E-6) for clause:  wordString(b, "how") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140847 (regressionFit = 0.140845, penalties=2.1500000000000006E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140847 (regressionFit = 0.140845, penalties=2.1500000000000006E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'wordString(b, "how") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]' score=-0.14084676487717854
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.140848 (regressionFit = 0.140845, penalties=2.9700000000000004E-6) for clause:  wordString(b, "how") ^ nextWordInSentence(a, b, c) ^ wordString(c, "are") => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.06E-6) for clause:  wordString(b, "how") ^ nextWordInSentence(a, b, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'wordString(b, "how") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]' score=-0.14084676487717854
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.140848 (regressionFit = 0.140845, penalties=2.9700000000000004E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=2.9700000000000004E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.1600000000000002E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.160000000000001E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=2] 'wordString(b, "how") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]' score=-0.14084676487717854
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.140848 (regressionFit = 0.140845, penalties=2.9700000000000004E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=2.9700000000000004E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.050000000000001E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.1600000000000002E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.260000000000001E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.140848 (regressionFit = 0.140845, penalties=3.160000000000001E-6) for clause:  wordString(b, "how") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=1] 'wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/29.0 pos, 0.0/0.0 neg]' score=-0.14181077263280856
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.141812 (regressionFit = 0.141810, penalties=2.1500000000000006E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.141812 (regressionFit = 0.141810, penalties=2.1500000000000006E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=2] 'wordString(b, "off") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]' score=-0.14181178263280855
%  At # nodes expanded = 7, |OPEN| = 6.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.141813 (regressionFit = 0.141810, penalties=2.9700000000000004E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.141813 (regressionFit = 0.141810, penalties=3.260000000000001E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #7, bodyLen=2] 'wordString(b, "off") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]' score=-0.14181178263280855
%  At # nodes expanded = 8, |OPEN| = 5.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.141813 (regressionFit = 0.141810, penalties=2.9700000000000004E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.141813 (regressionFit = 0.141810, penalties=3.260000000000001E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.141813 (regressionFit = 0.141810, penalties=3.050000000000001E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #7, bodyLen=1] 'wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/29.0 pos, 0.0/0.0 neg]' score=-0.14623233918749112
%  At # nodes expanded = 9, |OPEN| = 4.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.146233 (regressionFit = 0.146231, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.146233 (regressionFit = 0.146231, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]
%     Score = -0.146233 (regressionFit = 0.146231, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/29.0 pos, 0.0/0.0 neg]

***** Warning: #12 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -0.005.
% Will extend: wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
Comparing variance: 1.850371707708594E-17 to score=0.0025 #egs=3.0
Comparing variance: 0.005417100572199172 to score=0.0025 #egs=26.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 26.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-0.005417)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 4 and with score = -0.005417) into position #1 in the search queue (new size=2).

% Time for loop #7: 38 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      wordString(a, "how") => sentenceContainsTarget(_, a).  [covers 3.0/29.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 6 positive seeds: 1 2 5 18 22 25
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 26.0/26.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 26.0/26.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 26.0/26.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.136036 (regressionFit = 0.136035, penalties=1.14E-6) for clause:  wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.136036): wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139546 (regressionFit = 0.139545, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139156 (regressionFit = 0.139155, penalties=1.14E-6) for clause:  wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.137945 (regressionFit = 0.137944, penalties=1.14E-6) for clause:  wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.140807 (regressionFit = 0.140806, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 19.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.140584 (regressionFit = 0.140583, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 15.0/26.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 26.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=1] 'wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]' score=-0.13603616826036874
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.136037 (regressionFit = 0.136035, penalties=2.1500000000000006E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.136037 (regressionFit = 0.136035, penalties=2.1500000000000006E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=2] 'wordString(b, "off") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]' score=-0.13603717826036874
%  At # nodes expanded = 3, |OPEN| = 7.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.136038 (regressionFit = 0.136035, penalties=2.9700000000000004E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, c) ^ wordString(c, "please") => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.136038 (regressionFit = 0.136035, penalties=3.260000000000001E-6) for clause:  wordString(b, "off") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=2] 'wordString(b, "off") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]' score=-0.13603717826036874
%  At # nodes expanded = 4, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0.136038 (regressionFit = 0.136035, penalties=2.9700000000000004E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.136038 (regressionFit = 0.136035, penalties=3.260000000000001E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.136038 (regressionFit = 0.136035, penalties=3.050000000000001E-6) for clause:  wordString(b, "off") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, b) => sentenceContainsTarget(a, b).  [covers 6.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=1] 'wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/26.0 pos, 0.0/0.0 neg]' score=-0.13794545221753213
%  At # nodes expanded = 5, |OPEN| = 5.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.137946 (regressionFit = 0.137944, penalties=2.1500000000000006E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 5.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=2] 'wordString(b, "please") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 5.0/26.0 pos, 0.0/0.0 neg]' score=-0.13794646221753212
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.137947 (regressionFit = 0.137944, penalties=2.9700000000000004E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, c) ^ wordString(c, "Fudge") => sentenceContainsTarget(a, b).  [covers 5.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.137947 (regressionFit = 0.137944, penalties=3.1600000000000002E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 5.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #8, bodyLen=1] 'wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 4.0/26.0 pos, 0.0/0.0 neg]' score=-0.13915597123741102
%  At # nodes expanded = 7, |OPEN| = 4.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.139157 (regressionFit = 0.139155, penalties=2.1500000000000006E-6) for clause:  wordString(b, "thank") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139157 (regressionFit = 0.139155, penalties=2.1500000000000006E-6) for clause:  wordString(b, "thank") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139157 (regressionFit = 0.139155, penalties=2.1500000000000006E-6) for clause:  wordString(b, "thank") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #8, bodyLen=2] 'wordString(b, "thank") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]' score=-0.13915698123741102
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.139158 (regressionFit = 0.139155, penalties=2.9700000000000004E-6) for clause:  wordString(b, "thank") ^ nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139158 (regressionFit = 0.139155, penalties=3.260000000000001E-6) for clause:  wordString(b, "thank") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139158 (regressionFit = 0.139155, penalties=3.260000000000001E-6) for clause:  wordString(b, "thank") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #8, bodyLen=2] 'wordString(b, "thank") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]' score=-0.13915698123741102
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.139158 (regressionFit = 0.139155, penalties=2.9700000000000004E-6) for clause:  wordString(b, "thank") ^ earlyWordInSentence(a, c) ^ wordString(c, "I") => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139158 (regressionFit = 0.139155, penalties=3.260000000000001E-6) for clause:  wordString(b, "thank") ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139158 (regressionFit = 0.139155, penalties=3.1600000000000002E-6) for clause:  wordString(b, "thank") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]
%     Score = -0.139158 (regressionFit = 0.139155, penalties=3.260000000000001E-6) for clause:  wordString(b, "thank") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 4.0/26.0 pos, 0.0/0.0 neg]

***** Warning: #13 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]

% The best node found: wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]

% Expanding node at Level 4 with score = -0.005.
% Will extend: wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
Comparing variance: 0.004966351433088267 to score=0.0025 #egs=6.0
Comparing variance: 0.005311845983091956 to score=0.0025 #egs=20.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 20.0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-0.005312)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 5 and with score = -0.005312) into position #1 in the search queue (new size=2).

% Time for loop #8: 45 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      wordString(a, "off") => sentenceContainsTarget(_, a).  [covers 6.0/26.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 0 2 4 6 10 11 15 16
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = sentenceContainsTarget(a, b)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  sentenceContainsTarget(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
% Most-general root: sentenceContainsTarget(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #9, bodyLen=0] 'sentenceContainsTarget(_, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.102686 (regressionFit = 0.102685, penalties=1.14E-6) for clause:  wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.102686): wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.105582 (regressionFit = 0.105581, penalties=1.14E-6) for clause:  wordString(a, "thank") => sentenceContainsTarget(_, a).  [covers 4.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.104895 (regressionFit = 0.104893, penalties=1.14E-6) for clause:  wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  wordString(a, "now") => sentenceContainsTarget(_, a).  [covers 2.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.105919 (regressionFit = 0.105918, penalties=1.1300000000000002E-6) for clause:  nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 13.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.104895 (regressionFit = 0.104893, penalties=1.23E-6) for clause:  earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 20.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #9, bodyLen=1] 'wordString(a, "are") => sentenceContainsTarget(_, a).  [covers 6.0/20.0 pos, 0.0/0.0 neg]' score=-0.1026859733102936
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.102687 (regressionFit = 0.102685, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102687 (regressionFit = 0.102685, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102687 (regressionFit = 0.102685, penalties=2.1500000000000006E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #9, bodyLen=2] 'wordString(b, "are") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]' score=-0.1026869833102936
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  wordString(b, "are") ^ nextWordInSentence(a, b, c) ^ wordString(c, "you") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ nextWordInSentence(a, b, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ nextWordInSentence(a, b, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #9, bodyLen=2] 'wordString(b, "are") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]' score=-0.1026869833102936
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, c) ^ wordString(c, "Thank") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, c) ^ wordString(c, "youBye") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.1600000000000002E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.160000000000001E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #9, bodyLen=2] 'wordString(b, "are") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]' score=-0.1026869833102936
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, c) ^ wordString(c, "for") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, c) ^ wordString(c, "nowHello") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.1600000000000002E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, c) ^ nextWordInSentence(a, c, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.260000000000001E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.160000000000001E-6) for clause:  wordString(b, "are") ^ midWayWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #9, bodyLen=1] 'wordString(a, "please") => sentenceContainsTarget(_, a).  [covers 5.0/20.0 pos, 0.0/0.0 neg]' score=-0.10489462788809982
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -0.104896 (regressionFit = 0.104893, penalties=2.1500000000000006E-6) for clause:  wordString(b, "please") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, b).  [covers 5.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#7 of outerLoop #9, bodyLen=1] 'earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 15.0/20.0 pos, 0.0/0.0 neg]' score=-0.10489471788809983
%  At # nodes expanded = 7, |OPEN| = 5.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.105583 (regressionFit = 0.105581, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, _) ^ wordString(b, "now") => sentenceContainsTarget(a, b).  [covers 2.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.095099 (regressionFit = 0.095097, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.095099): earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102687 (regressionFit = 0.102685, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "youBye") => sentenceContainsTarget(a, _).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.100594 (regressionFit = 0.100592, penalties=2.1500000000000006E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "I") => sentenceContainsTarget(a, _).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.105920 (regressionFit = 0.105918, penalties=2.24E-6) for clause:  earlyWordInSentence(a, _) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 13.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.104896 (regressionFit = 0.104893, penalties=2.24E-6) for clause:  earlyWordInSentence(a, b) ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.104896 (regressionFit = 0.104893, penalties=2.24E-6) for clause:  earlyWordInSentence(a, _) ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.104896 (regressionFit = 0.104893, penalties=2.3400000000000005E-6) for clause:  earlyWordInSentence(a, _) ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 15.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#8 of outerLoop #9, bodyLen=2] 'earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]' score=-0.0950993466926788
%  At # nodes expanded = 8, |OPEN| = 13.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.102688 (regressionFit = 0.102685, penalties=2.9700000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "Thank") ^ wordString(b, "are") => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9700000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "Thank") ^ wordString(b, "now") => sentenceContainsTarget(a, b).  [covers 2.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.102688 (regressionFit = 0.102685, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "Thank") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 6.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.095100 (regressionFit = 0.095097, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Thank") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.095100 (regressionFit = 0.095097, penalties=3.160000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Thank") ^ earlyWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.095100 (regressionFit = 0.095097, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "Thank") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#9 of outerLoop #9, bodyLen=2] 'earlyWordInSentence(a, b) ^ wordString(b, "I") => sentenceContainsTarget(a, _).  [covers 7.0/20.0 pos, 0.0/0.0 neg]' score=-0.10059444397822767
%  At # nodes expanded = 9, |OPEN| = 12.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0.105584 (regressionFit = 0.105581, penalties=2.9700000000000004E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "I") ^ wordString(b, "thank") => sentenceContainsTarget(a, b).  [covers 4.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.100595 (regressionFit = 0.100592, penalties=3.1600000000000002E-6) for clause:  earlyWordInSentence(a, c) ^ wordString(c, "I") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, b).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.100596 (regressionFit = 0.100592, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "I") ^ nextWordInSentence(a, b, _) => sentenceContainsTarget(a, _).  [covers 7.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.100596 (regressionFit = 0.100592, penalties=3.260000000000001E-6) for clause:  earlyWordInSentence(a, b) ^ wordString(b, "I") ^ midWayWordInSentence(a, _) => sentenceContainsTarget(a, _).  [covers 7.0/20.0 pos, 0.0/0.0 neg]

***** Warning: #14 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]

% The best node found: earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]

% Expanding node at Level 5 with score = -0.005.
% Will extend: earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
%   Creating a TRUE-branch and FALSE-branch leaves because level = 5 >= 5

% Time for loop #9: 28 milliseconds.
% Internal node max length = 3
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #9, the best clause found is:
%      earlyWordInSentence(a, b) ^ wordString(b, "Thank") => sentenceContainsTarget(a, _).  [covers 8.0/20.0 pos, 0.0/0.0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (earlyWordInSentence(a, anon14079) ^ nextWordInSentence(a, anon14079, anon14223) ^ nextWordInSentence(a, anon14223, b) => sentenceContainsTarget(a, b))

%%%%%  WILL-Produced Tree Combined @ 13:49:15 3/13/17.  [Using 1,935,200 memory cells.]  %%%%%


% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 2.8712142153752063;  // std dev = 1.51e-06, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   else if ( earlyWordInSentence(a, b), earlyWordInSentence(a, c), wordString(c, "Thank") )
%   | then return -0.19800925399729097;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( midWayWordInSentence(a, b) )
%   | | then if ( earlyWordInSentence(a, d), nextWordInSentence(a, d, e), nextWordInSentence(a, e, b) )
%   | | | then return -0.3104207580357846;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( wordString(b, "am") )
%   | | | | then return -0.28041227492366433;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | else return -0.21753138757256366;  // std dev = 0.133, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( wordString(b, "how") )
%   | | | then return -0.3557637725819305;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( wordString(b, "off") )
%   | | | | then return -0.27643366047023854;  // std dev = 0.173, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | else if ( earlyWordInSentence(a, f), wordString(f, "Thank") )
%   | | | | | then return -0.2798102220164106;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | | else return -0.327984651110849;  // std dev = 0.233, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


% Clauses:

sentenceContainsTarget(a, b, 2.8712142153752063) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.19800925399729097) :- 
     earlyWordInSentence(a, b), 
     earlyWordInSentence(a, c), 
     wordString(c, "Thank"), 
     !. // Clause #2.

sentenceContainsTarget(a, b, -0.3104207580357846) :- 
     midWayWordInSentence(a, b), 
     earlyWordInSentence(a, c), 
     nextWordInSentence(a, c, d), 
     nextWordInSentence(a, d, b), 
     !. // Clause #3.

sentenceContainsTarget(a, b, -0.28041227492366433) :- 
     midWayWordInSentence(a, b), 
     wordString(b, "am"), 
     !. // Clause #4.

sentenceContainsTarget(a, b, -0.21753138757256366) :- 
     midWayWordInSentence(a, b), 
     !. // Clause #5.

sentenceContainsTarget(a, b, -0.3557637725819305) :- 
     wordString(b, "how"), 
     !. // Clause #6.

sentenceContainsTarget(a, b, -0.27643366047023854) :- 
     wordString(b, "off"), 
     !. // Clause #7.

sentenceContainsTarget(a, b, -0.2798102220164106) :- 
     earlyWordInSentence(a, c), 
     wordString(c, "Thank"), 
     !. // Clause #8.

sentenceContainsTarget(a, b, -0.327984651110849) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 2.8712142153752063). // Flattened version of clause #1.

flattened_earlyWordInSentence(A, B) ^
   earlyWordInSentence(A, UniqueVar1) ^
   wordString(UniqueVar1, "Thank") ^
   ! => 
   sentenceContainsTarget(A, B, -0.19800925399729097). // Flattened version of clause #2.

flattened_midWayWordInSentence(A, B) ^
   earlyWordInSentence(A, UniqueVar2) ^
   nextWordInSentence(A, UniqueVar2, UniqueVar3) ^
   nextWordInSentence(A, UniqueVar3, B) ^
   ! => 
   sentenceContainsTarget(A, B, -0.3104207580357846). // Flattened version of clause #3.

flattened_midWayWordInSentence(A, B) ^
   wordString(B, "am") ^
   ! => 
   sentenceContainsTarget(A, B, -0.28041227492366433). // Flattened version of clause #4.

flattened_midWayWordInSentence(A, B) ^
   ! => 
   sentenceContainsTarget(A, B, -0.21753138757256366). // Flattened version of clause #5.

flattened_wordString(A, "how") ^
   ! => 
   sentenceContainsTarget(Underscore, A, -0.3557637725819305). // Flattened version of clause #6.

flattened_wordString(A, "off") ^
   ! => 
   sentenceContainsTarget(Underscore, A, -0.27643366047023854). // Flattened version of clause #7.

flattened_earlyWordInSentence(A, UniqueVar4) ^
   wordString(UniqueVar4, "Thank") ^
   ! => 
   sentenceContainsTarget(A, Underscore, -0.2798102220164106). // Flattened version of clause #8.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.327984651110849). // Flattened version of clause #9.


% The unique flattened literals:
%   wordString(A, "how")
%   wordString(A, "you")
%   midWayWordInSentence(A, B)
%   nextWordInSentence(A, UniqueVar2, UniqueVar3)
%   wordString(B, "am")
%   earlyWordInSentence(A, UniqueVar4)
%   earlyWordInSentence(A, UniqueVar2)
%   wordString(UniqueVar4, "Thank")
%   earlyWordInSentence(A, B)
%   earlyWordInSentence(A, UniqueVar1)
%   wordString(UniqueVar1, "Thank")
%   wordString(A, "off")
%   nextWordInSentence(A, UniqueVar3, B)

% Time taken to learn model for 'sentenceContainsTarget': 2.221 seconds.
% Saving model in: train/models/bRDNs/sentenceContainsTarget.model
cached groundings hit: 0
Misses: 0

% Total learning time (5 trees): 2.705 seconds.
