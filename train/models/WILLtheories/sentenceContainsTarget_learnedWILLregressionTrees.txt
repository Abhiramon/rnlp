useStdLogicNotation: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 3
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 44
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 13:49:13 3/13/17.  [Using 1,749,504 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */


% Clauses:

sentenceContainsTarget(a, b, 0.8581489350995123) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.1418510649004877) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.8581489350995123). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.1418510649004877). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

%%%%%  WILL-Produced Tree #2 @ 13:49:14 3/13/17.  [Using 1,773,840 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */


% Clauses:

sentenceContainsTarget(a, b, 0.7194734122109542) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.12544463852839138) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.7194734122109542). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.12544463852839138). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

%%%%%  WILL-Produced Tree #3 @ 13:49:14 3/13/17.  [Using 1,789,128 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */


% Clauses:

sentenceContainsTarget(a, b, 0.5553664367462846) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.11231637819360642) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.5553664367462846). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.11231637819360642). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

%%%%%  WILL-Produced Tree #4 @ 13:49:14 3/13/17.  [Using 1,820,328 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

sentenceContainsTarget(a, b, 0.4175135841583098) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.10159632948783635) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.4175135841583098). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.10159632948783635). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")

%%%%%  WILL-Produced Tree #5 @ 13:49:14 3/13/17.  [Using 1,829,200 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.09269127618926093;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


% Clauses:

sentenceContainsTarget(a, b, 0.3207118471601497) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.09269127618926093) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 0.3207118471601497). // Flattened version of clause #1.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.09269127618926093). // Flattened version of clause #2.


% The unique flattened literals:
%   wordString(A, "you")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for sentenceContainsTarget.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).

logPrior(-1.8).
sentenceContainsTarget(a, b, total) :- // A general accessor. 
   sentenceContainsTarget(a, b, 1000000, total), !.
sentenceContainsTarget(a, b, total) :- waitHere("This should not fail", sentenceContainsTarget(a, b, total)).

sentenceContainsTarget(a, b, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_sentenceContainsTarget_tree1(a, b, treesToUse, total1),
   getScore_sentenceContainsTarget_tree2(a, b, treesToUse, total2),
   getScore_sentenceContainsTarget_tree3(a, b, treesToUse, total3),
   getScore_sentenceContainsTarget_tree4(a, b, treesToUse, total4),
   getScore_sentenceContainsTarget_tree5(a, b, treesToUse, total5),
   total is logPrior + total1 + total2 + total3 + total4 + total5,
   !.
sentenceContainsTarget(a, b, treesToUse, total) :- waitHere("This should not fail", sentenceContainsTarget(a, b, treesToUse, total)).

getScore_sentenceContainsTarget_tree1(a, b, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_sentenceContainsTarget_tree1(a, b, treesToUse, total1) :- sentenceContainsTarget_tree1(a, b, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_sentenceContainsTarget_tree2(a, b, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_sentenceContainsTarget_tree2(a, b, treesToUse, total2) :- sentenceContainsTarget_tree2(a, b, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_sentenceContainsTarget_tree3(a, b, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_sentenceContainsTarget_tree3(a, b, treesToUse, total3) :- sentenceContainsTarget_tree3(a, b, total), stepLength_tree3(stepLen), total3 is total * stepLen.

getScore_sentenceContainsTarget_tree4(a, b, treesToUse, 0.0) :- 4 > treesToUse, !.
getScore_sentenceContainsTarget_tree4(a, b, treesToUse, total4) :- sentenceContainsTarget_tree4(a, b, total), stepLength_tree4(stepLen), total4 is total * stepLen.

getScore_sentenceContainsTarget_tree5(a, b, treesToUse, 0.0) :- 5 > treesToUse, !.
getScore_sentenceContainsTarget_tree5(a, b, treesToUse, total5) :- sentenceContainsTarget_tree5(a, b, total), stepLength_tree5(stepLen), total5 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(sentenceContainsTarget, 1, [
   wordString(A, "you")]).

%%%%%  WILL-Produced Tree Combined @ 13:49:15 3/13/17.  [Using 1,935,200 memory cells.]  %%%%%

% FOR sentenceContainsTarget(a, b):
%   if ( wordString(b, "you") )
%   then return 2.8712142153752063;  // std dev = 1.51e-06, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   else if ( earlyWordInSentence(a, b), earlyWordInSentence(a, c), wordString(c, "Thank") )
%   | then return -0.19800925399729097;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( midWayWordInSentence(a, b) )
%   | | then if ( earlyWordInSentence(a, d), nextWordInSentence(a, d, e), nextWordInSentence(a, e, b) )
%   | | | then return -0.3104207580357846;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else if ( wordString(b, "am") )
%   | | | | then return -0.28041227492366433;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | else return -0.21753138757256366;  // std dev = 0.133, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( wordString(b, "how") )
%   | | | then return -0.3557637725819305;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else if ( wordString(b, "off") )
%   | | | | then return -0.27643366047023854;  // std dev = 0.173, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | | else if ( earlyWordInSentence(a, f), wordString(f, "Thank") )
%   | | | | | then return -0.2798102220164106;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | | | else return -0.327984651110849;  // std dev = 0.233, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


% Clauses:

sentenceContainsTarget(a, b, 2.8712142153752063) :- 
     wordString(b, "you"), 
     !. // Clause #1.

sentenceContainsTarget(a, b, -0.19800925399729097) :- 
     earlyWordInSentence(a, b), 
     earlyWordInSentence(a, c), 
     wordString(c, "Thank"), 
     !. // Clause #2.

sentenceContainsTarget(a, b, -0.3104207580357846) :- 
     midWayWordInSentence(a, b), 
     earlyWordInSentence(a, c), 
     nextWordInSentence(a, c, d), 
     nextWordInSentence(a, d, b), 
     !. // Clause #3.

sentenceContainsTarget(a, b, -0.28041227492366433) :- 
     midWayWordInSentence(a, b), 
     wordString(b, "am"), 
     !. // Clause #4.

sentenceContainsTarget(a, b, -0.21753138757256366) :- 
     midWayWordInSentence(a, b), 
     !. // Clause #5.

sentenceContainsTarget(a, b, -0.3557637725819305) :- 
     wordString(b, "how"), 
     !. // Clause #6.

sentenceContainsTarget(a, b, -0.27643366047023854) :- 
     wordString(b, "off"), 
     !. // Clause #7.

sentenceContainsTarget(a, b, -0.2798102220164106) :- 
     earlyWordInSentence(a, c), 
     wordString(c, "Thank"), 
     !. // Clause #8.

sentenceContainsTarget(a, b, -0.327984651110849) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_wordString(A, "you") ^
   ! => 
   sentenceContainsTarget(Underscore, A, 2.8712142153752063). // Flattened version of clause #1.

flattened_earlyWordInSentence(A, B) ^
   earlyWordInSentence(A, UniqueVar1) ^
   wordString(UniqueVar1, "Thank") ^
   ! => 
   sentenceContainsTarget(A, B, -0.19800925399729097). // Flattened version of clause #2.

flattened_midWayWordInSentence(A, B) ^
   earlyWordInSentence(A, UniqueVar2) ^
   nextWordInSentence(A, UniqueVar2, UniqueVar3) ^
   nextWordInSentence(A, UniqueVar3, B) ^
   ! => 
   sentenceContainsTarget(A, B, -0.3104207580357846). // Flattened version of clause #3.

flattened_midWayWordInSentence(A, B) ^
   wordString(B, "am") ^
   ! => 
   sentenceContainsTarget(A, B, -0.28041227492366433). // Flattened version of clause #4.

flattened_midWayWordInSentence(A, B) ^
   ! => 
   sentenceContainsTarget(A, B, -0.21753138757256366). // Flattened version of clause #5.

flattened_wordString(A, "how") ^
   ! => 
   sentenceContainsTarget(Underscore, A, -0.3557637725819305). // Flattened version of clause #6.

flattened_wordString(A, "off") ^
   ! => 
   sentenceContainsTarget(Underscore, A, -0.27643366047023854). // Flattened version of clause #7.

flattened_earlyWordInSentence(A, UniqueVar4) ^
   wordString(UniqueVar4, "Thank") ^
   ! => 
   sentenceContainsTarget(A, Underscore, -0.2798102220164106). // Flattened version of clause #8.

flattened_! => 
   sentenceContainsTarget(Underscore, Underscore, -0.327984651110849). // Flattened version of clause #9.


% The unique flattened literals:
%   wordString(A, "how")
%   wordString(A, "you")
%   midWayWordInSentence(A, B)
%   nextWordInSentence(A, UniqueVar2, UniqueVar3)
%   wordString(B, "am")
%   earlyWordInSentence(A, UniqueVar4)
%   earlyWordInSentence(A, UniqueVar2)
%   wordString(UniqueVar4, "Thank")
%   earlyWordInSentence(A, B)
%   earlyWordInSentence(A, UniqueVar1)
%   wordString(UniqueVar1, "Thank")
%   wordString(A, "off")
%   nextWordInSentence(A, UniqueVar3, B)
