////// Learned from a dataset containing 20 positive (20.0 weighted sum) and 0 negative (0.0 wgt'ed) examples.
////// The minimal (wgt'ed) coverage = 3.000, the maximal (wgt'ed) NEG coverage = 0.499, and the minimal (wgt'ed) precision = 0.001 (using m = 0.1)

useStdLogicNotation: true.


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: allPossibleMarkers
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #0, (-Infinity, 0.05], from 'outerLoop #1, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.046, precision = 0.984, and F1 = 0.087 - learned after 4 total and 2 acceptable nodes.  Node score = -307.8160955181501

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "are")) THEN output = -0.288358 ELSE output = 1.481028;

// Best in (weighted) recall bin #1, (0.05, 0.1], from 'outerLoop #3, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.088, precision = 0.980, and F1 = 0.161 - learned after 7 total and 4 acceptable nodes.  Node score = -0.3055439938417683

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "fine")) THEN output = -0.309782 ELSE output = -0.293186;

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #4, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.107, precision = 0.968, and F1 = 0.192 - learned after 3 total and 0 acceptable nodes.  Node score = -0.13149948946753787

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "Fudge")) THEN output = -0.209582 ELSE output = -0.290625;

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #9, null' and covering 4.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.199, precision = 0.976, and F1 = 0.331 - learned after 3 total and 1 acceptable nodes.  Node score = -0.10558175137802787

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "thank")) THEN output = -0.320172 ELSE output = -0.305851;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #5, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.213, precision = 0.968, and F1 = 0.349 - learned after 4 total and 1 acceptable nodes.  Node score = -0.06523021631351887

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "Fudge")) THEN output = -0.209582 ELSE output = -0.265431;

// Best in (weighted) recall bin #5, (0.25, 0.3], from 'outerLoop #9, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.299, precision = 0.984, and F1 = 0.458 - learned after 2 total and 0 acceptable nodes.  Node score = -0.1026859733102936

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "are")) THEN output = -0.288358 ELSE output = -0.317439;

// Best in (weighted) recall bin #6, (0.3, 0.35], from 'outerLoop #1, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.317, precision = 0.993, and F1 = 0.481 - learned after 2 total and 0 acceptable nodes.  Node score = -1.1399999962252418E-6

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you")) THEN output = 0.555366 ELSE output = -0.112316;

// Best in (weighted) recall bin #7, (0.35, 0.4], from 'outerLoop #1, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.399, precision = 0.993, and F1 = 0.569 - learned after 2 total and 0 acceptable nodes.  Node score = -1.1399999997224443E-6

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you")) THEN output = 0.320712 ELSE output = -0.092691;

// Best in (weighted) recall bin #8, (0.4, 0.45], from 'outerLoop #4, null' and covering 12.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.427, precision = 0.992, and F1 = 0.597 - learned after 88 total and 66 acceptable nodes.  Node score = -0.1481184485861388

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), midWayWordInSentence(a, anon14227), nextWordInSentence(a, b, anon14227)) THEN output = -0.288759 ELSE output = -0.276829;

// Best in (weighted) recall bin #9, (0.45, 0.5], from 'outerLoop #4, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.498, precision = 0.993, and F1 = 0.664 - learned after 43 total and 30 acceptable nodes.  Node score = -0.12638524511166258

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), nextWordInSentence(a, anon14079, anon14223), nextWordInSentence(a, anon14223, b)) THEN output = -0.310421 ELSE output = -0.253463;

// Best in (weighted) recall bin #10, (0.5, 0.55], from 'outerLoop #4, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.534, precision = 0.993, and F1 = 0.694 - learned after 24 total and 15 acceptable nodes.  Node score = -0.14799206259420836

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), nextWordInSentence(a, anon14079, b)) THEN output = -0.276104 ELSE output = -0.288679;

// Best in (weighted) recall bin #11, (0.55, 0.6], from 'outerLoop #5, null' and covering 8.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.567, precision = 0.988, and F1 = 0.721 - learned after 3 total and 0 acceptable nodes.  Node score = -0.05902581904960771

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "am")) THEN output = -0.280412 ELSE output = -0.217531;

// Best in (weighted) recall bin #12, (0.6, 0.65], from 'outerLoop #9, null' and covering 13.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.647, precision = 0.992, and F1 = 0.783 - learned after 6 total and 3 acceptable nodes.  Node score = -0.10591873099666003

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon19021)) THEN output = -0.311647 ELSE output = -0.303270;

// Best in (weighted) recall bin #14, (0.7, 0.75], from 'outerLoop #9, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.746, precision = 0.993, and F1 = 0.852 - learned after 7 total and 4 acceptable nodes.  Node score = -0.10489471788809983

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon19023)) THEN output = -0.303983 ELSE output = -0.322910;

// Best in (weighted) recall bin #15, (0.75, 0.8], from 'outerLoop #5, null' and covering 11.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.780, precision = 0.991, and F1 = 0.873 - learned after 7 total and 2 acceptable nodes.  Node score = -0.06523030631351888

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon16283)) THEN output = -0.265431 ELSE output = -0.209582;

// Best in (weighted) recall bin #16, (0.8, 0.85], from 'outerLoop #1, null' and covering 32.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.840, precision = 0.997, and F1 = 0.912 - learned after 9 total and 6 acceptable nodes.  Node score = -2.122117661759963

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon6759)) THEN output = 0.125514 ELSE output = -0.101596;
      /* FALSE NEG: sentenceContainsTarget("2_2", "2_2_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("6_3", "6_3_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_1") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_3") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */

// Best in (weighted) recall bin #17, (0.85, 0.9], from 'outerLoop #4, null' and covering 25.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.890, precision = 0.996, and F1 = 0.940 - learned after 10 total and 5 acceptable nodes.  Node score = -0.13149957946753785

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079)) THEN output = -0.290625 ELSE output = -0.209582;
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_1") Actual Bool=false Prob=0.14185106490048777 Output=-0.24344739438832408 */
      /* FALSE NEG: sentenceContainsTarget("9_3", "9_3_1") Actual Bool=false Prob=0.14185106490048777 Output=-0.14185106490048777 */


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #1, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #0, (-Infinity, 0.05], from 'outerLoop #1, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.046, precision = 0.984, and F1 = 0.087 - learned after 4 total and 2 acceptable nodes.  Node score = -307.8160955181501

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "are")) THEN output = -0.288358 ELSE output = 1.481028;

// Best in (weighted) recall bin #1, (0.05, 0.1], from 'outerLoop #1, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.085, precision = 0.968, and F1 = 0.157 - learned after 4 total and 1 acceptable nodes.  Node score = -1.345855511361002

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "I")) THEN output = -0.092691 ELSE output = 0.088173;

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #1, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.142, precision = 0.980, and F1 = 0.249 - learned after 9 total and 4 acceptable nodes.  Node score = -1.2760703498830241

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, b)) THEN output = -0.092691 ELSE output = 0.100230;

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #1, null' and covering 7.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.199, precision = 0.986, and F1 = 0.332 - learned after 14 total and 8 acceptable nodes.  Node score = -0.8972392175740018

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you"), earlyWordInSentence(a, anon8435), wordString(anon8435, "I")) THEN output = 0.320712 ELSE output = 0.010660;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #1, null' and covering 8.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.228, precision = 0.988, and F1 = 0.370 - learned after 58 total and 45 acceptable nodes.  Node score = -1.152010073922175

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon8319), midWayWordInSentence(a, anon8701), nextWordInSentence(a, anon8701, b)) THEN output = -0.092691 ELSE output = 0.121666;

// Best in (weighted) recall bin #5, (0.25, 0.3], from 'outerLoop #1, null' and covering 9.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.256, precision = 0.989, and F1 = 0.407 - learned after 39 total and 30 acceptable nodes.  Node score = -1.1042927962449256

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon8319), midWayWordInSentence(a, anon8319)) THEN output = -0.092691 ELSE output = 0.129910;

// Best in (weighted) recall bin #6, (0.3, 0.35], from 'outerLoop #1, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.317, precision = 0.993, and F1 = 0.481 - learned after 2 total and 0 acceptable nodes.  Node score = -1.1399999962252418E-6

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you")) THEN output = 0.555366 ELSE output = -0.112316;

// Best in (weighted) recall bin #7, (0.35, 0.4], from 'outerLoop #1, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.399, precision = 0.993, and F1 = 0.569 - learned after 2 total and 0 acceptable nodes.  Node score = -1.1399999997224443E-6

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you")) THEN output = 0.320712 ELSE output = -0.092691;

// Best in (weighted) recall bin #8, (0.4, 0.45], from 'outerLoop #1, null' and covering 16.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.420, precision = 0.994, and F1 = 0.590 - learned after 34 total and 29 acceptable nodes.  Node score = -1.3718752888145218

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon6757), nextWordInSentence(a, anon6757, anon7127)) THEN output = -0.101596 ELSE output = 0.228746;

// Best in (weighted) recall bin #9, (0.45, 0.5], from 'outerLoop #1, null' and covering 16.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.456, precision = 0.994, and F1 = 0.625 - learned after 38 total and 29 acceptable nodes.  Node score = -0.6296417119817554

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon8319), earlyWordInSentence(a, anon8699)) THEN output = -0.092691 ELSE output = 0.211922;

// Best in (weighted) recall bin #10, (0.5, 0.55], from 'outerLoop #1, null' and covering 70.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.534, precision = 0.999, and F1 = 0.696 - learned after 2 total and 0 acceptable nodes.  Node score = -0.3543173117183949

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "you")) THEN output = 2.871214 ELSE output = -0.288305;

// Best in (weighted) recall bin #11, (0.55, 0.6], from 'outerLoop #1, null' and covering 20.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.570, precision = 0.995, and F1 = 0.725 - learned after 8 total and 3 acceptable nodes.  Node score = -0.15950979623537787

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon8319)) THEN output = -0.092691 ELSE output = 0.293152;

// Best in (weighted) recall bin #12, (0.6, 0.65], from 'outerLoop #1, null' and covering 23.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.604, precision = 0.996, and F1 = 0.752 - learned after 7 total and 4 acceptable nodes.  Node score = -0.2515112256159974

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon6757)) THEN output = -0.101596 ELSE output = 0.382906;

// Best in (weighted) recall bin #16, (0.8, 0.85], from 'outerLoop #1, null' and covering 32.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.840, precision = 0.997, and F1 = 0.912 - learned after 9 total and 6 acceptable nodes.  Node score = -2.122117661759963

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon6759)) THEN output = 0.125514 ELSE output = -0.101596;
      /* FALSE NEG: sentenceContainsTarget("2_2", "2_2_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("6_3", "6_3_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_2") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_1") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_3") Actual Bool=false Prob=0.10159632948783633 Output=-0.10159632948783633 */

// Best in (weighted) recall bin #17, (0.85, 0.9], from 'outerLoop #1, null' and covering 30.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.855, precision = 0.997, and F1 = 0.920 - learned after 10 total and 5 acceptable nodes.  Node score = -1.2760705598830242

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon8321)) THEN output = 0.100230 ELSE output = -0.092691;
      /* FALSE NEG: sentenceContainsTarget("9_3", "9_3_3") Actual Bool=false Prob=0.09269127618926096 Output=-0.09269127618926096 */
      /* FALSE NEG: sentenceContainsTarget("6_3", "6_3_1") Actual Bool=false Prob=0.09269127618926096 Output=-0.09269127618926096 */
      /* FALSE NEG: sentenceContainsTarget("2_2", "2_2_2") Actual Bool=false Prob=0.09269127618926096 Output=-0.09269127618926096 */
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_2") Actual Bool=false Prob=0.09269127618926096 Output=-0.09269127618926096 */
      /* FALSE NEG: sentenceContainsTarget("5_2", "5_2_2") Actual Bool=false Prob=0.09269127618926096 Output=-0.09269127618926096 */


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #2, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #1, (0.05, 0.1], from 'outerLoop #2, null' and covering 4.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.065, precision = 0.976, and F1 = 0.123 - learned after 46 total and 31 acceptable nodes.  Node score = -0.3194171827173135

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, b), earlyWordInSentence(a, anon12035), wordString(anon12035, "Thank")) THEN output = -0.198009 ELSE output = -0.294642;

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #2, null' and covering 7.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.115, precision = 0.986, and F1 = 0.205 - learned after 7 total and 5 acceptable nodes.  Node score = -0.3487629078866635

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, b)) THEN output = -0.261802 ELSE output = -0.291741;

// Best in (weighted) recall bin #9, (0.45, 0.5], from 'outerLoop #2, null' and covering 28.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.458, precision = 0.996, and F1 = 0.628 - learned after 9 total and 7 acceptable nodes.  Node score = -0.3522216694469442

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b)) THEN output = -0.281942 ELSE output = -0.293704;

// Best in (weighted) recall bin #15, (0.75, 0.8], from 'outerLoop #2, null' and covering 47.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.769, precision = 0.998, and F1 = 0.869 - learned after 8 total and 6 acceptable nodes.  Node score = -0.35264358630641074

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon11397)) THEN output = -0.291164 ELSE output = -0.278707;

// Best in (weighted) recall bin #17, (0.85, 0.9], from 'outerLoop #2, null' and covering 54.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.884, precision = 0.998, and F1 = 0.938 - learned after 6 total and 4 acceptable nodes.  Node score = -0.3525465218189203

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon11395)) THEN output = -0.286365 ELSE output = -0.303270;
      /* FALSE NEG: sentenceContainsTarget("9_3", "9_3_3") Actual Bool=false Prob=0.14185106490048777 Output=-0.3599869796181401 */
      /* FALSE NEG: sentenceContainsTarget("5_2", "5_2_3") Actual Bool=false Prob=0.14185106490048777 Output=-0.26729570342887915 */
      /* FALSE NEG: sentenceContainsTarget("11_3", "11_3_4") Actual Bool=false Prob=0.14185106490048777 Output=-0.25416744309409417 */


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #3, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #1, (0.05, 0.1], from 'outerLoop #3, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.088, precision = 0.980, and F1 = 0.161 - learned after 7 total and 4 acceptable nodes.  Node score = -0.3055439938417683

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "fine")) THEN output = -0.309782 ELSE output = -0.293186;

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #3, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.105, precision = 0.984, and F1 = 0.190 - learned after 3 total and 1 acceptable nodes.  Node score = -0.3045772226989471

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "off")) THEN output = -0.276434 ELSE output = -0.296784;

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #3, null' and covering 10.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.175, precision = 0.990, and F1 = 0.298 - learned after 29 total and 19 acceptable nodes.  Node score = -0.30297419499307804

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), midWayWordInSentence(a, anon12397), nextWordInSentence(a, anon12397, b)) THEN output = -0.312408 ELSE output = -0.290861;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #3, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.245, precision = 0.993, and F1 = 0.393 - learned after 108 total and 82 acceptable nodes.  Node score = -0.302181531591348

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), nextWordInSentence(a, anon12267, anon12861), nextWordInSentence(a, anon12861, b)) THEN output = -0.310421 ELSE output = -0.289504;

// Best in (weighted) recall bin #5, (0.25, 0.3], from 'outerLoop #3, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.263, precision = 0.993, and F1 = 0.416 - learned after 55 total and 39 acceptable nodes.  Node score = -0.2998053858250219

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), nextWordInSentence(a, anon12267, b)) THEN output = -0.276104 ELSE output = -0.301262;

// Best in (weighted) recall bin #6, (0.3, 0.35], from 'outerLoop #3, null' and covering 18.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.315, precision = 0.994, and F1 = 0.479 - learned after 52 total and 36 acceptable nodes.  Node score = -0.2999317489145605

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), wordString(anon12267, "youBye")) THEN output = -0.310801 ELSE output = -0.287183;

// Best in (weighted) recall bin #7, (0.35, 0.4], from 'outerLoop #3, null' and covering 20.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.350, precision = 0.995, and F1 = 0.518 - learned after 65 total and 47 acceptable nodes.  Node score = -0.30250584163326477

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), nextWordInSentence(a, b, anon12861), wordString(anon12267, "Thank")) THEN output = -0.306450 ELSE output = -0.288258;

// Best in (weighted) recall bin #8, (0.4, 0.45], from 'outerLoop #3, null' and covering 25.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.438, precision = 0.996, and F1 = 0.608 - learned after 17 total and 11 acceptable nodes.  Node score = -0.30608307783198013

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon12395)) THEN output = -0.290625 ELSE output = -0.297779;

// Best in (weighted) recall bin #9, (0.45, 0.5], from 'outerLoop #3, null' and covering 28.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.490, precision = 0.996, and F1 = 0.657 - learned after 10 total and 7 acceptable nodes.  Node score = -0.29792446639630166

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b)) THEN output = -0.281942 ELSE output = -0.306903;

// Best in (weighted) recall bin #10, (0.5, 0.55], from 'outerLoop #3, null' and covering 31.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.543, precision = 0.997, and F1 = 0.703 - learned after 75 total and 56 acceptable nodes.  Node score = -0.30274216237648327

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), nextWordInSentence(a, b, anon12861), nextWordInSentence(a, anon12861, anon13073)) THEN output = -0.302371 ELSE output = -0.285426;

// Best in (weighted) recall bin #14, (0.7, 0.75], from 'outerLoop #3, null' and covering 41.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.718, precision = 0.998, and F1 = 0.835 - learned after 54 total and 38 acceptable nodes.  Node score = -0.29876988837574286

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267), nextWordInSentence(a, b, anon12861)) THEN output = -0.302057 ELSE output = -0.275640;

// Best in (weighted) recall bin #15, (0.75, 0.8], from 'outerLoop #3, null' and covering 43.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.753, precision = 0.998, and F1 = 0.858 - learned after 9 total and 6 acceptable nodes.  Node score = -0.3020884937533294

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon12267)) THEN output = -0.299829 ELSE output = -0.278707;

// Best in (weighted) recall bin #17, (0.85, 0.9], from 'outerLoop #3, null' and covering 50.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.876, precision = 0.998, and F1 = 0.933 - learned after 8 total and 5 acceptable nodes.  Node score = -0.30620633534197284

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon12265)) THEN output = -0.293434 ELSE output = -0.303270;
      /* FALSE NEG: sentenceContainsTarget("9_3", "9_3_3") Actual Bool=false Prob=0.14185106490048777 Output=-0.3599869796181401 */
      /* FALSE NEG: sentenceContainsTarget("5_2", "5_2_3") Actual Bool=false Prob=0.14185106490048777 Output=-0.26729570342887915 */
      /* FALSE NEG: sentenceContainsTarget("11_3", "11_3_4") Actual Bool=false Prob=0.14185106490048777 Output=-0.25416744309409417 */


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #4, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #4, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.107, precision = 0.968, and F1 = 0.192 - learned after 3 total and 0 acceptable nodes.  Node score = -0.13149948946753787

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "Fudge")) THEN output = -0.209582 ELSE output = -0.290625;

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #4, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.178, precision = 0.980, and F1 = 0.301 - learned after 5 total and 2 acceptable nodes.  Node score = -0.1424268961974767

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "nowHello")) THEN output = -0.315034 ELSE output = -0.274748;

// Best in (weighted) recall bin #5, (0.25, 0.3], from 'outerLoop #4, null' and covering 8.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.285, precision = 0.988, and F1 = 0.442 - learned after 4 total and 1 acceptable nodes.  Node score = -0.1490661807412472

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "am")) THEN output = -0.280412 ELSE output = -0.282554;

// Best in (weighted) recall bin #6, (0.3, 0.35], from 'outerLoop #4, null' and covering 9.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.320, precision = 0.989, and F1 = 0.484 - learned after 22 total and 13 acceptable nodes.  Node score = -0.1380668248824508

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), wordString(anon14079, "youBye")) THEN output = -0.310776 ELSE output = -0.268284;

// Best in (weighted) recall bin #7, (0.35, 0.4], from 'outerLoop #4, null' and covering 10.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.356, precision = 0.990, and F1 = 0.524 - learned after 93 total and 71 acceptable nodes.  Node score = -0.13465624984281935

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), midWayWordInSentence(a, anon14227), nextWordInSentence(a, anon14227, b)) THEN output = -0.312408 ELSE output = -0.265017;

// Best in (weighted) recall bin #8, (0.4, 0.45], from 'outerLoop #4, null' and covering 12.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.427, precision = 0.992, and F1 = 0.597 - learned after 88 total and 66 acceptable nodes.  Node score = -0.1481184485861388

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), midWayWordInSentence(a, anon14227), nextWordInSentence(a, b, anon14227)) THEN output = -0.288759 ELSE output = -0.276829;

// Best in (weighted) recall bin #9, (0.45, 0.5], from 'outerLoop #4, null' and covering 14.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.498, precision = 0.993, and F1 = 0.664 - learned after 43 total and 30 acceptable nodes.  Node score = -0.12638524511166258

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), nextWordInSentence(a, anon14079, anon14223), nextWordInSentence(a, anon14223, b)) THEN output = -0.310421 ELSE output = -0.253463;

// Best in (weighted) recall bin #10, (0.5, 0.55], from 'outerLoop #4, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.534, precision = 0.993, and F1 = 0.694 - learned after 24 total and 15 acceptable nodes.  Node score = -0.14799206259420836

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079), nextWordInSentence(a, anon14079, b)) THEN output = -0.276104 ELSE output = -0.288679;

// Best in (weighted) recall bin #17, (0.85, 0.9], from 'outerLoop #4, null' and covering 25.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.890, precision = 0.996, and F1 = 0.940 - learned after 10 total and 5 acceptable nodes.  Node score = -0.13149957946753785

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon14079)) THEN output = -0.290625 ELSE output = -0.209582;
      /* FALSE NEG: sentenceContainsTarget("3_3", "3_3_1") Actual Bool=false Prob=0.14185106490048777 Output=-0.24344739438832408 */
      /* FALSE NEG: sentenceContainsTarget("9_3", "9_3_1") Actual Bool=false Prob=0.14185106490048777 Output=-0.14185106490048777 */


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #5, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #5, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.213, precision = 0.968, and F1 = 0.349 - learned after 4 total and 1 acceptable nodes.  Node score = -0.06523021631351887

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "Fudge")) THEN output = -0.209582 ELSE output = -0.265431;

// Best in (weighted) recall bin #11, (0.55, 0.6], from 'outerLoop #5, null' and covering 8.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.567, precision = 0.988, and F1 = 0.721 - learned after 3 total and 0 acceptable nodes.  Node score = -0.05902581904960771

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), wordString(b, "am")) THEN output = -0.280412 ELSE output = -0.217531;

// Best in (weighted) recall bin #15, (0.75, 0.8], from 'outerLoop #5, null' and covering 11.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.780, precision = 0.991, and F1 = 0.873 - learned after 7 total and 2 acceptable nodes.  Node score = -0.06523030631351888

 FOR sentenceContainsTarget(a, b) IF (midWayWordInSentence(a, b), earlyWordInSentence(a, anon16283)) THEN output = -0.265431 ELSE output = -0.209582;


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #6, null
////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #7, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #2, (0.1, 0.15], from 'outerLoop #7, null' and covering 3.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.103, precision = 0.968, and F1 = 0.186 - learned after 5 total and 3 acceptable nodes.  Node score = -0.14084575487717854

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "how")) THEN output = -0.355764 ELSE output = -0.301265;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #7, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.206, precision = 0.984, and F1 = 0.341 - learned after 2 total and 0 acceptable nodes.  Node score = -0.14181077263280856

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "off")) THEN output = -0.276434 ELSE output = -0.314852;

// Best in (weighted) recall bin #12, (0.6, 0.65], from 'outerLoop #7, null' and covering 18.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.619, precision = 0.994, and F1 = 0.763 - learned after 7 total and 5 acceptable nodes.  Node score = -0.1472871080597319

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon17791)) THEN output = -0.312613 ELSE output = -0.297559;

// Best in (weighted) recall bin #15, (0.75, 0.8], from 'outerLoop #7, null' and covering 22.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.756, precision = 0.995, and F1 = 0.859 - learned after 6 total and 4 acceptable nodes.  Node score = -0.14871240223915325

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon17789)) THEN output = -0.308059 ELSE output = -0.303270;


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #8, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #8, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.192, precision = 0.980, and F1 = 0.321 - learned after 5 total and 3 acceptable nodes.  Node score = -0.13794545221753213

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "please")) THEN output = -0.322910 ELSE output = -0.296112;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #8, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.230, precision = 0.984, and F1 = 0.373 - learned after 2 total and 0 acceptable nodes.  Node score = -0.13603616826036874

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "off")) THEN output = -0.276434 ELSE output = -0.308715;

// Best in (weighted) recall bin #11, (0.55, 0.6], from 'outerLoop #8, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.575, precision = 0.993, and F1 = 0.728 - learned after 7 total and 5 acceptable nodes.  Node score = -0.14058399124395296

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon18479)) THEN output = -0.303983 ELSE output = -0.297559;

// Best in (weighted) recall bin #14, (0.7, 0.75], from 'outerLoop #8, null' and covering 19.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.728, precision = 0.995, and F1 = 0.841 - learned after 6 total and 4 acceptable nodes.  Node score = -0.14080726656553375

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon18477)) THEN output = -0.300527 ELSE output = -0.303270;


////////////////////////////////////////////////////////////////////////////////
////
////     Gleaner for: outerLoop #9, null
////
////////////////////////////////////////////////////////////////////////////////

// Best in (weighted) recall bin #3, (0.15, 0.2], from 'outerLoop #9, null' and covering 4.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.199, precision = 0.976, and F1 = 0.331 - learned after 3 total and 1 acceptable nodes.  Node score = -0.10558175137802787

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "thank")) THEN output = -0.320172 ELSE output = -0.305851;

// Best in (weighted) recall bin #4, (0.2, 0.25], from 'outerLoop #9, null' and covering 5.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.249, precision = 0.980, and F1 = 0.397 - learned after 4 total and 2 acceptable nodes.  Node score = -0.10489462788809982

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "please")) THEN output = -0.322910 ELSE output = -0.303983;

// Best in (weighted) recall bin #5, (0.25, 0.3], from 'outerLoop #9, null' and covering 6.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.299, precision = 0.984, and F1 = 0.458 - learned after 2 total and 0 acceptable nodes.  Node score = -0.1026859733102936

 FOR sentenceContainsTarget(a, b) IF (wordString(b, "are")) THEN output = -0.288358 ELSE output = -0.317439;

// Best in (weighted) recall bin #6, (0.3, 0.35], from 'outerLoop #9, null' and covering 7.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.348, precision = 0.986, and F1 = 0.515 - learned after 32 total and 27 acceptable nodes.  Node score = -0.10059444397822767

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon19023), wordString(anon19023, "I")) THEN output = -0.331609 ELSE output = -0.296387;

// Best in (weighted) recall bin #7, (0.35, 0.4], from 'outerLoop #9, null' and covering 8.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.398, precision = 0.988, and F1 = 0.567 - learned after 30 total and 25 acceptable nodes.  Node score = -0.0950993466926788

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon19023), wordString(anon19023, "Thank")) THEN output = -0.279810 ELSE output = -0.327985;

// Best in (weighted) recall bin #12, (0.6, 0.65], from 'outerLoop #9, null' and covering 13.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.647, precision = 0.992, and F1 = 0.783 - learned after 6 total and 3 acceptable nodes.  Node score = -0.10591873099666003

 FOR sentenceContainsTarget(a, b) IF (nextWordInSentence(a, b, anon19021)) THEN output = -0.311647 ELSE output = -0.303270;

// Best in (weighted) recall bin #14, (0.7, 0.75], from 'outerLoop #9, null' and covering 15.0 wgt'ed positive and 0.0 wgt'ed negative examples:
//    Wgt'ed recall = 0.746, precision = 0.993, and F1 = 0.852 - learned after 7 total and 4 acceptable nodes.  Node score = -0.10489471788809983

 FOR sentenceContainsTarget(a, b) IF (earlyWordInSentence(a, anon19023)) THEN output = -0.303983 ELSE output = -0.322910;

